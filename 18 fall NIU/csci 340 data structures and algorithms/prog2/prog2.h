#ifndef PROG1_H // should not be defined any place else
#define PROG1_H // same const value as for ifndef directive

#include <iostream>
#include <iomanip>
#include <vector>
#include <cstdlib> //For srand() and rand()
#include <algorithm> //for that find crap

const int ARR_SIZE = 200;
const int TEST_ARR_SIZE = 100;
const int SEED1 =1;
const int SEED2 = 3;
const int LOW =1;
const int HIGH = 1000;
const int NO_ITEMS=16;
const int ITEM_W=4;


using namespace std;

void Vectors ( vector < int >& v1, vector < int >& v2, int s1, int s2 ) ;/*
:
Fills the elements of vectors v1 of size ARR_SIZE = 200 and v2 of size
TEST_ARR_SIZE = 100 with random numbers, generated by two sets of
pseudo-random numbers with the seed values s1 and s2, where s1 (defined as
SEED1 = 1) is for v1and s2 (defined as SEED2 = 3) is for v2. To initiate a
random number generator (RNG) with the seed value seed, execute the system
function srand ( seed ) (only once), and to generate a random integer in the
range [ LOW = 1, HIGH = 1000 ], execute: rand ( ) % ( HIGH – LOW + 1
) + LOW. */


bool linearSearch ( const vector < int >& v, int x ) ;/*: A linear search
algorithm, where x is the searched item in vector v. It simply starts searching for
x from the beginning of vector v to the end, but it stops searching when there is a
match. If the search is successful, it returns true; otherwise, it returns false. To
implement this routine, simply call the find ( ) function in the STL.
*/


bool binarySearch ( const vector < int >& v, int x );/*: A binary search
algorithm, where x is the searched item in vector v. If the search is successful, it
returns true; otherwise, it returns false. To implement this routine, simply call
the binary_search ( ) function in the STL. */

int search ( const vector < int >& v1, const vector < int >& v2, bool (*p ) ( const vector < int >&, int ) );
 /*: A generic search algorithm – takes a
pointer to the search routine p ( ), and then it calls p ( ) for each element of
vector v2 in vector v1. It computes the total number of successful searches and
returns that value to the main ( ) routine as an input argument to the print
routine printStat ( ), which is used to print out the final statistics for a search
algorithm. */

void sortVector ( vector < int >& v ) ;/*: A sort algorithm to sort the elements
of vector v in ascending order. To implement this routine, simply call the sort ( )
function in the STL. */

void printVector ( const vector < int >& v ); /*: Prints the contents of vector
v on stdout, up to NO_ITEMS = 16 items on a single line except perhaps the
last line. The sorted numbers need to be properly aligned on the output. For each
printed number, allocate ITEM_W = 4 spaces for each item. */

void printStat ( int totalSucCnt, int vectorSz ); /*: Prints the percent of
successful searches as right-aligned, floating-point numbers on stdout, where
totalSucCnt is the total number of successful comparisons and vectorSz is the
size of the test vector */
#endif
