WEBVTT

1
00:00:03.570 --> 00:00:06.310
The mainframe is an ever
evolving platform.

2
00:00:06.310 --> 00:00:08.920
New features are constantly
being developed,

3
00:00:08.920 --> 00:00:11.440
existing components are getting upgrades,
and

4
00:00:11.440 --> 00:00:16.650
its capabilities are always being extended
to meet the world's business demands.

5
00:00:16.650 --> 00:00:19.860
As it evolved the Mainframe
gained some unique capabilities

6
00:00:19.860 --> 00:00:23.500
that you won't find anywhere else, and
I'd like to cover a few of those here.

7
00:00:24.730 --> 00:00:29.000
We'll start off with the intelligent
resource director or IRD.

8
00:00:29.000 --> 00:00:31.838
The IRD function optimizes processor and

9
00:00:31.838 --> 00:00:36.632
channel resource utilization across
LPARs within a single z system.

10
00:00:36.632 --> 00:00:41.321
It groups LPARs into an LPAR
cluster allowing WLM to manage

11
00:00:41.321 --> 00:00:47.770
resources across the entire cluster
not just in one single image.

12
00:00:47.770 --> 00:00:50.620
IRD has the following characteristics.

13
00:00:50.620 --> 00:00:55.020
First, it allows for
more flexible LPAR CPU management.

14
00:00:55.020 --> 00:01:00.510
Next, thanks to dynamic channel path
management, DCM, FICON channel bandwidth,

15
00:01:00.510 --> 00:01:03.810
which is primarily used for
connections to storage devices,

16
00:01:03.810 --> 00:01:08.780
can be moved between disk control
units to meet demands as they change.

17
00:01:08.780 --> 00:01:13.390
Lastly, channel subsystem priority
queuing allows I/O request

18
00:01:13.390 --> 00:01:16.970
in the channel subsystem to have
priorities assigned to them.

19
00:01:16.970 --> 00:01:18.990
This allows for even greater control and

20
00:01:18.990 --> 00:01:22.409
flexibility when we have important
business objectives to meet.

21
00:01:23.570 --> 00:01:26.800
On the network side of things,
HiperSockets provide high-speed

22
00:01:26.800 --> 00:01:30.850
connectivity between servers
in the same physical system.

23
00:01:30.850 --> 00:01:35.010
These connections are entirely virtual,
so there's no need to run cables or

24
00:01:35.010 --> 00:01:38.750
hook connected servers into
a networking infrastructure.

25
00:01:38.750 --> 00:01:43.589
You define a HiperSocket and
then virtually connect it to z/OS Linux or

26
00:01:43.589 --> 00:01:44.564
ZVM systems.

27
00:01:44.564 --> 00:01:50.900
You can even mix and match, to the OS it
looks like a regular networking device.

28
00:01:50.900 --> 00:01:54.915
They can now communicate as if they were
plugged into a super high speed network

29
00:01:54.915 --> 00:01:56.960
switch, except it's all virtual.

30
00:01:58.020 --> 00:02:00.380
Up next, HiperDispatch.

31
00:02:00.380 --> 00:02:04.420
So when we virtualize the LPARs, when
there's work to be done the system looks

32
00:02:04.420 --> 00:02:07.050
at the pool of available processors and

33
00:02:07.050 --> 00:02:12.320
lines up that specific unit of work with
an available processor that can handle it.

34
00:02:12.320 --> 00:02:17.380
This is all fine and good, but in some
workloads we gain performance by ensuring

35
00:02:17.380 --> 00:02:21.850
that the work is dispatched to the same
processor as frequently as possible.

36
00:02:21.850 --> 00:02:25.700
So there's no wait while we figure out
which processor, the work should go on,

37
00:02:25.700 --> 00:02:28.820
and we also benefit from
reusing relevant data

38
00:02:28.820 --> 00:02:31.900
left in the cache from
previous operations.

39
00:02:31.900 --> 00:02:34.250
It's like landing in the airport and
renting a car.

40
00:02:34.250 --> 00:02:38.440
If you have to go find the right car each
time and adjust the seat and the mirrors

41
00:02:38.440 --> 00:02:42.935
and figure out how to pair the Bluetooth
to your phone in it, that takes time.

42
00:02:42.935 --> 00:02:46.580
HiperDispatch is like having your favorite
car parked right outside waiting for

43
00:02:46.580 --> 00:02:48.285
you all the time.

44
00:02:48.285 --> 00:02:53.285
HiperDispatch really helps WLM in
keeping consistent response times, and

45
00:02:53.285 --> 00:02:55.880
definitely helps once you
start scaling up systems

46
00:02:55.880 --> 00:02:59.370
with lots of processors
with lots of cores.

47
00:02:59.370 --> 00:03:03.500
Now setting up Mainframe hardware
can be a fairly complex task.

48
00:03:03.500 --> 00:03:07.269
There are just so many definitions
and bits of information you've got to

49
00:03:07.269 --> 00:03:09.909
manage correctly in order
to add storage for example.

50
00:03:09.909 --> 00:03:12.861
Fortunately zDAC, the z discovery and

51
00:03:12.861 --> 00:03:18.030
autoconfiguration aims to help
make that a little bit easier.

52
00:03:18.030 --> 00:03:22.360
It can detect certain devices on FICON and
storage area networks, and

53
00:03:22.360 --> 00:03:27.820
streamline the process of configuring the HCD or
hardware configuration definition.

54
00:03:27.820 --> 00:03:33.510
This helps to simplify I/O configuration
and reduce complexity and set up time.

55
00:03:33.510 --> 00:03:38.350
Virtual flash memory, now earlier we
talked about storage and how virtual

56
00:03:38.350 --> 00:03:44.500
memory means that the memory for a program
might go from on-chip memory out to DASD.

57
00:03:44.500 --> 00:03:46.940
Well, there's actually
an in-between step and

58
00:03:46.940 --> 00:03:49.550
that's where virtual
flash memory comes in.

59
00:03:49.550 --> 00:03:54.204
This is storage class memory that lives in
the same physical box as the memory and

60
00:03:54.204 --> 00:03:55.047
processors.

61
00:03:55.047 --> 00:03:58.375
But can be configured to
provide additional support for

62
00:03:58.375 --> 00:04:02.694
programs that take a noticeable
performance hit when they page data like

63
00:04:02.694 --> 00:04:05.262
DB2, Java, and the coupling facility.

64
00:04:05.262 --> 00:04:07.290
And then there's zAware.

65
00:04:07.290 --> 00:04:11.610
As you know, the Mainframe is constantly
gathering data, not just data for

66
00:04:11.610 --> 00:04:16.270
business transactions, but information
about what's going on behind the scenes.

67
00:04:16.270 --> 00:04:19.120
Network configuration changes,
LPARs coming up, and

68
00:04:19.120 --> 00:04:23.630
going down, software levels changing,
new user IDs getting created.

69
00:04:23.630 --> 00:04:27.825
And nobody has time to go through all
those log files line by line by line and

70
00:04:27.825 --> 00:04:31.083
inspect every single thing
that happens during the day.

71
00:04:31.083 --> 00:04:38.433
Fortunately, zAware which stands for z
advanced work load analysis reporter does.

72
00:04:38.433 --> 00:04:42.576
It watches everything going on, and
compares what it sees with prior system

73
00:04:42.576 --> 00:04:46.920
data, highlighting anomalies,
and suggesting courses of action.

74
00:04:46.920 --> 00:04:49.470
It does all of this in near real time.

75
00:04:49.470 --> 00:04:53.965
So you can even use zAware's interface
to diagnose the cause of past or

76
00:04:53.965 --> 00:04:55.890
current anomalies.

77
00:04:55.890 --> 00:05:00.120
As you can see, there's a lot of unique
liese features that you can explore and

78
00:05:00.120 --> 00:05:01.940
there's always more in the works.