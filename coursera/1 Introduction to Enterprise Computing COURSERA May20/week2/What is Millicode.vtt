WEBVTT

1
00:00:02.600 --> 00:00:04.895
Hi, I'm Bronchi Ebelma.

2
00:00:04.895 --> 00:00:07.390
I'm a lead design engineer
working on millicode.

3
00:00:07.390 --> 00:00:08.890
So what is millicode?

4
00:00:08.890 --> 00:00:11.035
It basically is a form of

5
00:00:11.035 --> 00:00:14.750
micro-architecture
that runs on IBMC.

6
00:00:14.750 --> 00:00:20.780
By micro architecture,
I mean there's a layer,

7
00:00:20.780 --> 00:00:23.290
invisible layer between what we

8
00:00:23.290 --> 00:00:26.409
publish in the principles
of operations,

9
00:00:26.409 --> 00:00:30.410
and another layer which
is a micro-architecture.

10
00:00:30.410 --> 00:00:33.090
The reason why we
have that is because,

11
00:00:33.090 --> 00:00:36.465
every generation of z,
the micro-architecture changes.

12
00:00:36.465 --> 00:00:38.710
However, what we published
in the principles of

13
00:00:38.710 --> 00:00:41.020
operation, that does not change.

14
00:00:41.020 --> 00:00:43.125
We add stuff, we
don't remove stuff.

15
00:00:43.125 --> 00:00:44.175
We add new instructors,

16
00:00:44.175 --> 00:00:45.555
we don't remove instructions.

17
00:00:45.555 --> 00:00:50.330
So an instruction that we
introduce 10 years ago,

18
00:00:50.330 --> 00:00:52.520
functionally it does
the same thing,

19
00:00:52.520 --> 00:00:54.200
but micro-architecturely
how it gets to

20
00:00:54.200 --> 00:00:56.155
the answer, is very different.

21
00:00:56.155 --> 00:00:57.980
In millicode, we make

22
00:00:57.980 --> 00:01:00.980
those changes so that
the operating system,

23
00:01:00.980 --> 00:01:01.970
or the user, or the program,

24
00:01:01.970 --> 00:01:03.560
doesn't have to
make those changes.

25
00:01:03.560 --> 00:01:08.040
In addition to
the implemented instruction

26
00:01:08.040 --> 00:01:10.050
set under the
principle operations,

27
00:01:10.050 --> 00:01:11.870
millicode is also involved in

28
00:01:11.870 --> 00:01:14.225
a few other key aspects of IBM Z.

29
00:01:14.225 --> 00:01:17.495
We do system initialization,

30
00:01:17.495 --> 00:01:19.985
which basically means
you power on under system,

31
00:01:19.985 --> 00:01:22.800
go into IMLS steps,
initial machine load,

32
00:01:22.800 --> 00:01:25.910
that's IMO, millicode is
involved with virtualization.

33
00:01:25.910 --> 00:01:29.300
So you have a single
resource system,

34
00:01:29.300 --> 00:01:31.400
and you're going to divide it
up into logical partitions

35
00:01:31.400 --> 00:01:34.240
and run different operating
systems in each partition.

36
00:01:34.240 --> 00:01:35.775
For that to be possible,

37
00:01:35.775 --> 00:01:37.340
you need an instruction that's

38
00:01:37.340 --> 00:01:40.700
called psi or stat
interpretive execution,

39
00:01:40.700 --> 00:01:43.115
and that instruction is
implemented in millicode.

40
00:01:43.115 --> 00:01:45.230
So that's millicode
in a nutshell.

41
00:01:45.230 --> 00:01:46.970
As you can see, the things that

42
00:01:46.970 --> 00:01:48.790
we do on the system is important,

43
00:01:48.790 --> 00:01:51.630
especially for recovery,
for availability,

44
00:01:51.630 --> 00:01:53.925
and for self feasibility.

45
00:01:53.925 --> 00:01:56.180
I've been enjoying
my work in millicode,

46
00:01:56.180 --> 00:01:59.670
and it's been fun journey
so far. Thank you