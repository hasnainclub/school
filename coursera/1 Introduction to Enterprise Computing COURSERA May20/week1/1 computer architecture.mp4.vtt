WEBVTT

1
00:00:02.840 --> 00:00:06.150
All right. Let's talk about
computer architecture.

2
00:00:06.150 --> 00:00:08.570
Now what is computer
architecture?

3
00:00:08.570 --> 00:00:10.770
You've probably heard about
architecture before when

4
00:00:10.770 --> 00:00:13.260
people are talking about
the skyscrapers in hospitals,

5
00:00:13.260 --> 00:00:14.985
and museums, and stuff like that.

6
00:00:14.985 --> 00:00:18.900
Well, computer architecture
is actually pretty simple.

7
00:00:18.900 --> 00:00:20.735
There's lots of
different kinds of buildings,

8
00:00:20.735 --> 00:00:22.220
lots of different kinds
of computers,

9
00:00:22.220 --> 00:00:24.035
and you wouldn't
architect a home,

10
00:00:24.035 --> 00:00:26.960
the same way you would
architect a car wash,

11
00:00:26.960 --> 00:00:28.490
and you wouldn't
architect the Museum the

12
00:00:28.490 --> 00:00:30.570
same way you do a restaurant.

13
00:00:30.570 --> 00:00:32.370
Well, there's different
types of computers,

14
00:00:32.370 --> 00:00:33.435
you wouldn't architect them

15
00:00:33.435 --> 00:00:34.980
exactly the same
either because each

16
00:00:34.980 --> 00:00:37.860
one has its own specific set
of needs and purposes,

17
00:00:37.860 --> 00:00:39.195
just like the buildings.

18
00:00:39.195 --> 00:00:41.340
So there's certain things
you need to take into

19
00:00:41.340 --> 00:00:44.920
consideration when thinking
about computer architecture.

20
00:00:44.920 --> 00:00:46.840
It's the set of rules and

21
00:00:46.840 --> 00:00:49.345
methods that describe
the functionality,

22
00:00:49.345 --> 00:00:52.840
organization, and implementation
of the computer system.

23
00:00:52.840 --> 00:00:54.645
Now this includes hardware,

24
00:00:54.645 --> 00:00:57.985
software, and everything in
between, and all around it.

25
00:00:57.985 --> 00:00:59.755
Let's talk about hardware.

26
00:00:59.755 --> 00:01:01.240
When we talk about hardware,

27
00:01:01.240 --> 00:01:03.310
we're talking about the stuff
you can physically see

28
00:01:03.310 --> 00:01:05.760
and touch, stuff like CPUs,

29
00:01:05.760 --> 00:01:09.345
memory, hard drives, network
cards, I/O adapters,

30
00:01:09.345 --> 00:01:12.345
the graphical processing unit,
all that stuff.

31
00:01:12.345 --> 00:01:13.875
The stuff that you can pick up,

32
00:01:13.875 --> 00:01:16.590
take a look at, and shove
back into the computer.

33
00:01:16.590 --> 00:01:19.225
Don't shove it back into
the computer, place it gently.

34
00:01:19.225 --> 00:01:20.650
We're talking about software,

35
00:01:20.650 --> 00:01:22.030
that's the stuff
that we can't see,

36
00:01:22.030 --> 00:01:23.770
that stuff like programs
that are written

37
00:01:23.770 --> 00:01:26.079
in code: operating systems,

38
00:01:26.079 --> 00:01:29.040
built-in programs like
Notepad, applications.

39
00:01:29.040 --> 00:01:31.380
You're right, libraries,
ones you download,

40
00:01:31.380 --> 00:01:34.830
tools, utilities,
programs, all stuff.

41
00:01:34.830 --> 00:01:36.890
You can think about
the operating system

42
00:01:36.890 --> 00:01:38.660
as the primary program,

43
00:01:38.660 --> 00:01:40.475
and everything else
just goes through it.

44
00:01:40.475 --> 00:01:42.740
So there instances when
you're going to write

45
00:01:42.740 --> 00:01:45.575
software that sits directly
on top of the hardware,

46
00:01:45.575 --> 00:01:47.300
that doesn't use the
operating system.

47
00:01:47.300 --> 00:01:49.460
Those do exist, but
most of the time,

48
00:01:49.460 --> 00:01:51.380
the operating system is
there in the middle,

49
00:01:51.380 --> 00:01:53.900
making sure not only
this stuff is easier to write,

50
00:01:53.900 --> 00:01:56.440
but it's going to run
safer as well. All right.

51
00:01:56.440 --> 00:01:58.880
Let's get into these computer
architecture components.

52
00:01:58.880 --> 00:02:00.530
Earlier, I talked about how

53
00:02:00.530 --> 00:02:02.150
architecture computer is a lot

54
00:02:02.150 --> 00:02:03.890
like the architecture
of a building,

55
00:02:03.890 --> 00:02:05.150
lots of different buildings,

56
00:02:05.150 --> 00:02:06.365
lots of different computers.

57
00:02:06.365 --> 00:02:07.790
Now a building typically

58
00:02:07.790 --> 00:02:09.760
has a couple of things in common,

59
00:02:09.760 --> 00:02:11.655
it got walls, it's got a roof,

60
00:02:11.655 --> 00:02:13.815
it got floor, hallway,

61
00:02:13.815 --> 00:02:15.770
it probably has
an electrical system,

62
00:02:15.770 --> 00:02:18.005
probably plumbing,
windows, doors.

63
00:02:18.005 --> 00:02:20.510
You can see there's a lot of
stuff to think about there.

64
00:02:20.510 --> 00:02:22.160
In computer architecture, you've

65
00:02:22.160 --> 00:02:23.870
got a series of components,

66
00:02:23.870 --> 00:02:25.850
and the architecture
is all about how

67
00:02:25.850 --> 00:02:27.770
they are designed to work
well with one another,

68
00:02:27.770 --> 00:02:30.710
and fit together, so that
it performs as a bank,

69
00:02:30.710 --> 00:02:32.435
or as a museum again.

70
00:02:32.435 --> 00:02:35.695
We can see this in computer
architecture as well.

71
00:02:35.695 --> 00:02:37.190
There's this split between

72
00:02:37.190 --> 00:02:39.215
the hardware and
the software side.

73
00:02:39.215 --> 00:02:41.555
So let's start with
software design.

74
00:02:41.555 --> 00:02:44.075
Software design
includes the compiler,

75
00:02:44.075 --> 00:02:47.480
firmware, operating
system, applications.

76
00:02:47.480 --> 00:02:49.100
The hardware design includes

77
00:02:49.100 --> 00:02:51.710
physical circuit, digital design,

78
00:02:51.710 --> 00:02:53.105
data path control,

79
00:02:53.105 --> 00:02:56.495
instruction set procedures,
and I/O systems.

80
00:02:56.495 --> 00:02:58.550
Let's start by talking
about the software.

81
00:02:58.550 --> 00:03:00.680
Now, you can generally split

82
00:03:00.680 --> 00:03:02.810
software into
two distinct flavors,

83
00:03:02.810 --> 00:03:06.335
there's application software
and the system software.

84
00:03:06.335 --> 00:03:08.690
Application software
is what you generally

85
00:03:08.690 --> 00:03:11.170
call an app, short
for application.

86
00:03:11.170 --> 00:03:14.040
You start it, it runs,
it does its thing,

87
00:03:14.040 --> 00:03:15.795
and when it's done you
don't need it anymore,

88
00:03:15.795 --> 00:03:17.570
you just stop it,
and it goes away.

89
00:03:17.570 --> 00:03:19.880
It generally interacts with you,

90
00:03:19.880 --> 00:03:22.000
or maybe another user, or a file.

91
00:03:22.000 --> 00:03:25.010
But it typically sits on top
of the operating system,

92
00:03:25.010 --> 00:03:27.200
and it's going to use
the operating system

93
00:03:27.200 --> 00:03:28.730
to get the data it needs,

94
00:03:28.730 --> 00:03:33.185
to access memory, to talk to
the network, all that stuff.

95
00:03:33.185 --> 00:03:35.660
Now system software
is the code that

96
00:03:35.660 --> 00:03:38.345
runs as part of the
operating system generally.

97
00:03:38.345 --> 00:03:39.800
Without the system software,

98
00:03:39.800 --> 00:03:42.440
you wouldn't be able to run
any application software,

99
00:03:42.440 --> 00:03:45.860
because generally, it's
the application software telling

100
00:03:45.860 --> 00:03:48.750
the system software
what it wants.

101
00:03:48.750 --> 00:03:50.550
Then there's firmware.

102
00:03:50.550 --> 00:03:54.010
Firmware generally gets
written to read only memory,

103
00:03:54.010 --> 00:03:55.460
and it comes from the factory

104
00:03:55.460 --> 00:03:57.290
associated with
that piece of hardware,

105
00:03:57.290 --> 00:03:58.445
and you're not
going to change it,

106
00:03:58.445 --> 00:04:00.785
unless there's a problem
that needs to get fixed,

107
00:04:00.785 --> 00:04:02.435
or there's a new
feature coming out.

108
00:04:02.435 --> 00:04:04.460
You can upgrade
the firmware to get that.

109
00:04:04.460 --> 00:04:07.210
The firmware provides
a common set of methods for

110
00:04:07.210 --> 00:04:10.270
doing things that the operating
system is going to use.

111
00:04:10.270 --> 00:04:11.950
Let's take a step back and

112
00:04:11.950 --> 00:04:13.435
see what we have so far, right?

113
00:04:13.435 --> 00:04:14.885
We've talked about
a lot of stuff.

114
00:04:14.885 --> 00:04:16.845
We have the application software,

115
00:04:16.845 --> 00:04:18.645
that's the app, all right?

116
00:04:18.645 --> 00:04:20.020
That sits on top of

117
00:04:20.020 --> 00:04:22.570
the operating system,
the system software.

118
00:04:22.570 --> 00:04:24.310
But there's actually
a step before

119
00:04:24.310 --> 00:04:27.070
that because you have to
build the application.

120
00:04:27.070 --> 00:04:29.985
So you write the application
in software language

121
00:04:29.985 --> 00:04:33.010
like Java, C++,
something like that.

122
00:04:33.010 --> 00:04:35.080
Now I can write some code,

123
00:04:35.080 --> 00:04:36.400
and you can probably
take a look at it,

124
00:04:36.400 --> 00:04:38.035
and see what I'm trying to do.

125
00:04:38.035 --> 00:04:40.930
The computer itself doesn't
understand this yet,

126
00:04:40.930 --> 00:04:43.590
until we run it through
something called a compiler.

127
00:04:43.590 --> 00:04:45.550
A compiler takes source code

128
00:04:45.550 --> 00:04:46.910
which is the stuff that I write,

129
00:04:46.910 --> 00:04:49.910
and then compiles it into
something machine can run.

130
00:04:49.910 --> 00:04:51.730
That's called object code,

131
00:04:51.730 --> 00:04:53.480
and it's a one-way direction.

132
00:04:53.480 --> 00:04:55.070
You can't take
object code and then

133
00:04:55.070 --> 00:04:57.275
break it apart into
its source code.

134
00:04:57.275 --> 00:04:58.610
It's like baking a cake,

135
00:04:58.610 --> 00:04:59.735
you can't take a cake,

136
00:04:59.735 --> 00:05:01.460
and turn it back into
its ingredients,

137
00:05:01.460 --> 00:05:03.590
it's the finished product there.

138
00:05:03.590 --> 00:05:07.215
So that's how you make
an application or a cake.

139
00:05:07.215 --> 00:05:09.585
Okay. So we've got our compiler,

140
00:05:09.585 --> 00:05:10.945
we've got an application,

141
00:05:10.945 --> 00:05:12.725
we've got the operating system.

142
00:05:12.725 --> 00:05:15.934
Then before that, before it
actually hits the hardware,

143
00:05:15.934 --> 00:05:18.200
we've got something called
the instruction set,

144
00:05:18.200 --> 00:05:20.599
which is part of the instruction
set architecture,

145
00:05:20.599 --> 00:05:22.580
another aspect of
computer architecture.

146
00:05:22.580 --> 00:05:24.560
This is ultimately what bridges

147
00:05:24.560 --> 00:05:27.010
the gap between the software
and the hardware.

148
00:05:27.010 --> 00:05:29.450
The instruction set is
basically everything that

149
00:05:29.450 --> 00:05:32.150
the computer's processor
is capable of doing.

150
00:05:32.150 --> 00:05:34.460
It lists out every single
function it can do.

151
00:05:34.460 --> 00:05:36.500
I can compare these
two numbers together,

152
00:05:36.500 --> 00:05:37.810
tell you which ones greater.

153
00:05:37.810 --> 00:05:40.115
If they're equal, add
these two numbers together,

154
00:05:40.115 --> 00:05:41.450
store this data over here,

155
00:05:41.450 --> 00:05:42.725
move this data over there.

156
00:05:42.725 --> 00:05:44.300
It's nothing too fancy.

157
00:05:44.300 --> 00:05:45.620
But these are the small

158
00:05:45.620 --> 00:05:47.300
building blocks
that you can use to

159
00:05:47.300 --> 00:05:50.630
make these higher-level
fancy applications from.

160
00:05:50.630 --> 00:05:53.270
Now ultimately, everything
we're doing right

161
00:05:53.270 --> 00:05:56.300
now is that we can get
something onto the processor,

162
00:05:56.300 --> 00:05:59.245
so the processor can run
this application, right?

163
00:05:59.245 --> 00:06:00.965
That's why we're
doing all this stuff.

164
00:06:00.965 --> 00:06:02.870
You've probably seen
a processor too.

165
00:06:02.870 --> 00:06:05.810
You're thinking about this,
it's a square chip thing

166
00:06:05.810 --> 00:06:08.500
with a whole bunch of
metal pins on the bottom of it.

167
00:06:08.500 --> 00:06:10.880
Well, those metal pins
aren't just for traction,

168
00:06:10.880 --> 00:06:13.550
they're there because they
hook into the motherboard,

169
00:06:13.550 --> 00:06:15.460
or the back plane
of the computer,

170
00:06:15.460 --> 00:06:18.350
and we've just send
electrical impulses through it.

171
00:06:18.350 --> 00:06:19.730
That's how we tell the chip,

172
00:06:19.730 --> 00:06:21.950
the processor what
we want it to do.

173
00:06:21.950 --> 00:06:23.780
Then we want to get
the answer of what

174
00:06:23.780 --> 00:06:25.510
those two numbers
added together are,

175
00:06:25.510 --> 00:06:26.655
we have to do a read,

176
00:06:26.655 --> 00:06:29.760
so we have to know which pins
to read from, right?

177
00:06:29.760 --> 00:06:31.910
There's a whole lot of
stuff to understand there,

178
00:06:31.910 --> 00:06:34.880
and that's all documented
in the instruction set.

179
00:06:34.880 --> 00:06:38.560
Now you can picture a calculator
is a type of computer,

180
00:06:38.560 --> 00:06:40.470
a phone is a type of computer,

181
00:06:40.470 --> 00:06:42.440
a supercomputer is
a type of computer.

182
00:06:42.440 --> 00:06:44.480
Three different types
of computers,

183
00:06:44.480 --> 00:06:46.280
three different architectures,

184
00:06:46.280 --> 00:06:48.710
three different
instruction sets, right?

185
00:06:48.710 --> 00:06:50.150
So we ultimately need

186
00:06:50.150 --> 00:06:53.125
a compiler for each
one of those, right?

187
00:06:53.125 --> 00:06:54.920
The blueprints for all that are

188
00:06:54.920 --> 00:06:56.720
contained within
the instruction set,

189
00:06:56.720 --> 00:06:59.555
and part of the instruction
set architecture.

190
00:06:59.555 --> 00:07:02.030
Even in very simple
couple of lines of

191
00:07:02.030 --> 00:07:04.615
code program like add
these things together,

192
00:07:04.615 --> 00:07:06.380
it has to take quite a journey

193
00:07:06.380 --> 00:07:07.550
to get from something that I can

194
00:07:07.550 --> 00:07:08.900
describe to something that can be

195
00:07:08.900 --> 00:07:11.270
represented
electronically on a CPU.

196
00:07:11.270 --> 00:07:13.940
Then there's a whole other area
of physical design,

197
00:07:13.940 --> 00:07:15.740
that describes building
the logic gates

198
00:07:15.740 --> 00:07:17.020
and physical chips,

199
00:07:17.020 --> 00:07:18.885
that falls under digital design,

200
00:07:18.885 --> 00:07:22.110
circuit implementation, and
physical implementation.

201
00:07:22.110 --> 00:07:23.540
Believe me, that goes off

202
00:07:23.540 --> 00:07:25.265
pretty far in its own direction.

203
00:07:25.265 --> 00:07:27.830
We've covered a lot here:
from stuff you can see,

204
00:07:27.830 --> 00:07:30.230
to stuff your run,
to stuff you write,

205
00:07:30.230 --> 00:07:32.910
to stuff that you
just have to trust

206
00:07:32.910 --> 00:07:33.980
that it's there because there's

207
00:07:33.980 --> 00:07:35.660
no way a computer
would work without it.

208
00:07:35.660 --> 00:07:38.210
There's definitely
a near infinite number

209
00:07:38.210 --> 00:07:40.130
of ways you could
architect a computer.

210
00:07:40.130 --> 00:07:41.450
Hopefully, the computer you're

211
00:07:41.450 --> 00:07:42.980
using right now was built for

212
00:07:42.980 --> 00:07:46.000
a specific purpose and it
does it really, really well.

213
00:07:46.000 --> 00:07:47.460
In the next lesson, we're going

214
00:07:47.460 --> 00:07:48.725
to talk about
a computer that's been

215
00:07:48.725 --> 00:07:51.635
architected specifically to
run business transactions,

216
00:07:51.635 --> 00:07:53.850
and that's the IBM Z.