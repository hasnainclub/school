WEBVTT

1
00:00:02.660 --> 00:00:06.330
The z/OS system libraries
are where there is a lot of

2
00:00:06.330 --> 00:00:09.765
the customization data for
the operating system lives.

3
00:00:09.765 --> 00:00:12.390
You'll find a lot of important
information in here,

4
00:00:12.390 --> 00:00:14.730
including where to find
other important information.

5
00:00:14.730 --> 00:00:16.740
So kind of important.

6
00:00:16.740 --> 00:00:18.840
We've mentioned a
few of these before

7
00:00:18.840 --> 00:00:21.180
during the module on IPLing a system.

8
00:00:21.180 --> 00:00:22.500
I know you wanted to know

9
00:00:22.500 --> 00:00:24.330
more information about
those data sets.

10
00:00:24.330 --> 00:00:26.955
So here we are,
let's get started.

11
00:00:26.955 --> 00:00:31.610
First up, SYS1.LINKLIB,
this contains much of

12
00:00:31.610 --> 00:00:33.590
the executable code also known as

13
00:00:33.590 --> 00:00:36.710
modules for z/OS
components and utilities.

14
00:00:36.710 --> 00:00:41.240
In here, you'll find
the module MSTJCL00,

15
00:00:41.240 --> 00:00:44.569
which contains
the initial JCL statements

16
00:00:44.569 --> 00:00:47.420
that start the master
scheduler subsystem.

17
00:00:47.420 --> 00:00:49.595
So that's how JES gets started.

18
00:00:49.595 --> 00:00:51.995
SYS1.LPALIB.

19
00:00:51.995 --> 00:00:55.955
LPALIB stands for
link pack area library.

20
00:00:55.955 --> 00:00:57.605
These modules are shared by

21
00:00:57.605 --> 00:00:59.870
all address spaces in the system,

22
00:00:59.870 --> 00:01:03.335
and because they are read-only
and not self-modifying,

23
00:01:03.335 --> 00:01:05.150
they can be used by a number of

24
00:01:05.150 --> 00:01:07.145
address spaces at the same time.

25
00:01:07.145 --> 00:01:09.410
There are four types of
modules you'll find in

26
00:01:09.410 --> 00:01:12.105
the LPA, dynamic, fixed,

27
00:01:12.105 --> 00:01:14.450
modified, pagable, and it

28
00:01:14.450 --> 00:01:17.615
all comes down to how they
should be handled in memory.

29
00:01:17.615 --> 00:01:20.000
SYS1.NUCLEUS contains

30
00:01:20.000 --> 00:01:22.940
the basic supervisor modules
for the system,

31
00:01:22.940 --> 00:01:25.370
the core of the system
that is required for it to

32
00:01:25.370 --> 00:01:28.535
begin loading the full version
of the operating system.

33
00:01:28.535 --> 00:01:32.030
We just recently talked
about SYS1.PROCLIB,

34
00:01:32.030 --> 00:01:33.860
which is where the IBM supplied

35
00:01:33.860 --> 00:01:37.765
JCL procedures for performing
system functions live,

36
00:01:37.765 --> 00:01:41.280
and my favorite
SYS1.PARMLIB contains

37
00:01:41.280 --> 00:01:42.630
the control parameters for

38
00:01:42.630 --> 00:01:45.450
z/OS and some program products.

39
00:01:45.450 --> 00:01:47.180
If you've used Linux, or Unix

40
00:01:47.180 --> 00:01:48.770
based operating system before,

41
00:01:48.770 --> 00:01:51.635
it's similar to what
you'd find in /etc.

42
00:01:51.635 --> 00:01:55.355
So if you're looking to
increase a value from 25-30,

43
00:01:55.355 --> 00:01:56.510
or change the name of

44
00:01:56.510 --> 00:01:58.355
what something on
the system gets called,

45
00:01:58.355 --> 00:02:02.270
chances are it's in SYS1.PARMLIB.

46
00:02:02.270 --> 00:02:04.790
What makes up
a particular system is

47
00:02:04.790 --> 00:02:07.610
how these system libraries
are configured.

48
00:02:07.610 --> 00:02:09.920
In addition, there's
also information that

49
00:02:09.920 --> 00:02:12.080
comes from other non IBM vendors,

50
00:02:12.080 --> 00:02:14.000
as well as how
a particular company

51
00:02:14.000 --> 00:02:16.180
chooses to set up their system.

52
00:02:16.180 --> 00:02:17.810
You can organize a lot of

53
00:02:17.810 --> 00:02:21.485
this customization information
into these six areas,

54
00:02:21.485 --> 00:02:23.600
there's the z/OS software,

55
00:02:23.600 --> 00:02:25.385
the non z/OS software,

56
00:02:25.385 --> 00:02:27.440
middle ware like CICS, Db2,

57
00:02:27.440 --> 00:02:30.020
non IBM software that comes from

58
00:02:30.020 --> 00:02:32.500
other vendors,
customization data,

59
00:02:32.500 --> 00:02:35.180
user-defined exits,
which boils down to

60
00:02:35.180 --> 00:02:38.270
ways that users have customized
and extended software,

61
00:02:38.270 --> 00:02:40.315
as well as user data.

62
00:02:40.315 --> 00:02:42.400
When a program calls a module,

63
00:02:42.400 --> 00:02:45.500
the system needs to know where
it is in order to run it,

64
00:02:45.500 --> 00:02:47.210
and it has a certain order it

65
00:02:47.210 --> 00:02:49.460
goes through when
searching for modules.

66
00:02:49.460 --> 00:02:54.085
The first place it looks isn't
the job pack area, or JPA.

67
00:02:54.085 --> 00:02:57.570
If it's not in there,
it'll look in the TASKLIB.

68
00:02:57.570 --> 00:03:01.300
Next stop is
the STEPLIB, or JOBLIB.

69
00:03:01.300 --> 00:03:05.030
These are specific DD names
that can be used to allocate

70
00:03:05.030 --> 00:03:06.770
data sets to be searched ahead of

71
00:03:06.770 --> 00:03:09.635
the default system search
order for programs.

72
00:03:09.635 --> 00:03:11.509
We then hit LPA,

73
00:03:11.509 --> 00:03:13.040
that linked pack area,

74
00:03:13.040 --> 00:03:14.755
where it will hit the dynamic,

75
00:03:14.755 --> 00:03:17.010
then the fixed, and
then the modified,

76
00:03:17.010 --> 00:03:19.095
and then the pageable modules,

77
00:03:19.095 --> 00:03:21.840
and then Linklist as specified in

78
00:03:21.840 --> 00:03:25.815
PROGxx, and LNKLSTxx.

79
00:03:25.815 --> 00:03:29.835
By default, the LINKLIST
begins with SYS1.LINKLIB,

80
00:03:29.835 --> 00:03:31.440
and there's more to follow.

81
00:03:31.440 --> 00:03:34.954
But you can view and change
the order in your PROGxx,

82
00:03:34.954 --> 00:03:37.685
and add other libraries
to that list.

83
00:03:37.685 --> 00:03:39.800
By the way, the list
of places that

84
00:03:39.800 --> 00:03:41.420
the system searches for modules

85
00:03:41.420 --> 00:03:43.745
is called a concatenation.

86
00:03:43.745 --> 00:03:45.470
In order for modules to work,

87
00:03:45.470 --> 00:03:46.970
they need to be ready to go.

88
00:03:46.970 --> 00:03:49.040
It's not practical
to keep all modules

89
00:03:49.040 --> 00:03:51.250
loaded in main memory
all the time.

90
00:03:51.250 --> 00:03:54.470
But each time the system has
to go and look for a module,

91
00:03:54.470 --> 00:03:56.090
that takes time, and it pulls

92
00:03:56.090 --> 00:03:59.300
the CPU away from doing
other important stuff.

93
00:03:59.300 --> 00:04:00.950
So there's this concept of

94
00:04:00.950 --> 00:04:04.495
a library lookaside
facility, or LLA.

95
00:04:04.495 --> 00:04:06.920
This reduces the amount
of I/O needed to

96
00:04:06.920 --> 00:04:10.430
locate and fetch modules
from the DASD Storage.

97
00:04:10.430 --> 00:04:13.250
LLA takes a look
at the modules and

98
00:04:13.250 --> 00:04:14.600
determines which ones could

99
00:04:14.600 --> 00:04:16.765
really benefit from being staged.

100
00:04:16.765 --> 00:04:19.255
Similarly, there's a VLF,

101
00:04:19.255 --> 00:04:21.235
or virtual lookaside facility,

102
00:04:21.235 --> 00:04:22.820
which is used to store named

103
00:04:22.820 --> 00:04:24.800
objects in virtual storage and

104
00:04:24.800 --> 00:04:26.570
retrieve those on behalf of

105
00:04:26.570 --> 00:04:29.165
users in multiple address spaces.

106
00:04:29.165 --> 00:04:32.795
So let's look at how these
get set up in a few examples.

107
00:04:32.795 --> 00:04:35.390
Let's start with
the LOADxx member,

108
00:04:35.390 --> 00:04:37.130
which is one of
the first modules that

109
00:04:37.130 --> 00:04:39.065
gets loaded in IPL time.

110
00:04:39.065 --> 00:04:42.515
In here you'll see
the PARMLIB concatenation.

111
00:04:42.515 --> 00:04:46.225
You can specify up to
16 partitioned data sets in here.

112
00:04:46.225 --> 00:04:48.232
You can see in
this configuration,

113
00:04:48.232 --> 00:04:51.475
there is a SYS0.IPLPARM,

114
00:04:51.475 --> 00:04:54.650
and it will automatically
add SYS1.PARMLIB to

115
00:04:54.650 --> 00:04:56.075
the end of the concatenation

116
00:04:56.075 --> 00:04:58.070
even if you don't specify it.

117
00:04:58.070 --> 00:05:01.775
There's also the IEASYSxx member.

118
00:05:01.775 --> 00:05:04.805
Now this is where
the installation defaults go.

119
00:05:04.805 --> 00:05:06.620
These are the parameters
that will not

120
00:05:06.620 --> 00:05:09.109
change unless you're
altering the physical,

121
00:05:09.109 --> 00:05:11.120
or logically defined environment

122
00:05:11.120 --> 00:05:13.370
that your system is operating in.

123
00:05:13.370 --> 00:05:15.230
If you want to see
the concatenation

124
00:05:15.230 --> 00:05:17.030
without digging
through the data sets,

125
00:05:17.030 --> 00:05:19.430
you can type D PARMLIB,

126
00:05:19.430 --> 00:05:21.380
and it will list
them out for you.

127
00:05:21.380 --> 00:05:26.215
You can also look at the IPL
information with D IPLINFO,

128
00:05:26.215 --> 00:05:29.029
that will show you when
the system was last IPLed,

129
00:05:29.029 --> 00:05:31.235
and what the version of
the operating system is,

130
00:05:31.235 --> 00:05:33.725
and what the contents of IEASYS,

131
00:05:33.725 --> 00:05:37.505
and IEASYM are. That determines
which members get loaded.

132
00:05:37.505 --> 00:05:40.190
You'll also see
the IODF device number,

133
00:05:40.190 --> 00:05:42.920
and the IPL device
and volume serial number,

134
00:05:42.920 --> 00:05:45.275
this command is
critically important.

135
00:05:45.275 --> 00:05:47.335
I can remember from
my SYSPROG days,

136
00:05:47.335 --> 00:05:48.800
sometimes we'd bring up a system,

137
00:05:48.800 --> 00:05:51.290
and it would just not
be behaving correctly.

138
00:05:51.290 --> 00:05:52.820
Something we thought we installed

139
00:05:52.820 --> 00:05:55.010
wasn't there, modules
weren't loading.

140
00:05:55.010 --> 00:05:58.700
Step one is to issue a D IPLINFO,

141
00:05:58.700 --> 00:05:59.840
and make sure that what you're

142
00:05:59.840 --> 00:06:02.075
running is what you
think you're running.

143
00:06:02.075 --> 00:06:03.560
Maybe we forgot to change

144
00:06:03.560 --> 00:06:06.890
the IPL volume or change
one of those IEA members.

145
00:06:06.890 --> 00:06:09.455
This is your sanity
check right here.

146
00:06:09.455 --> 00:06:13.160
Each IEA member has
its own purpose and story,

147
00:06:13.160 --> 00:06:15.260
and importantly, sections of

148
00:06:15.260 --> 00:06:18.410
documentation describing
exactly how to use it.

149
00:06:18.410 --> 00:06:20.270
We're not going to go
through them all here.

150
00:06:20.270 --> 00:06:21.590
The important thing to take

151
00:06:21.590 --> 00:06:23.885
away is where to
look to find them,

152
00:06:23.885 --> 00:06:26.375
generally in the z/OS
system libraries,

153
00:06:26.375 --> 00:06:28.355
and where to find more about them

154
00:06:28.355 --> 00:06:30.805
by using the manuals
or a search engine.

155
00:06:30.805 --> 00:06:34.380
I do want to show you
those IEASYMxx members

156
00:06:34.380 --> 00:06:35.630
though since we've covered

157
00:06:35.630 --> 00:06:37.880
the topic of symbols
a little while ago,

158
00:06:37.880 --> 00:06:39.505
and I want to tie back to that.

159
00:06:39.505 --> 00:06:41.820
If you look in IEASYSxx,

160
00:06:41.820 --> 00:06:45.050
you'll see some of
those static system symbols

161
00:06:45.050 --> 00:06:46.910
getting set like SYSNAME,

162
00:06:46.910 --> 00:06:49.460
which is equal to SC04,

163
00:06:49.460 --> 00:06:50.990
you can see a few other symbols

164
00:06:50.990 --> 00:06:52.355
getting set in there as well.

165
00:06:52.355 --> 00:06:54.335
So later on when you
want to reference

166
00:06:54.335 --> 00:06:57.755
a specific data set built
specifically for that system,

167
00:06:57.755 --> 00:06:59.375
we can just say LPARNAME,

168
00:06:59.375 --> 00:07:02.195
&SYSNAME, and we've used a symbol.

169
00:07:02.195 --> 00:07:03.680
If you ever wanted to display the

170
00:07:03.680 --> 00:07:04.925
list of symbols available,

171
00:07:04.925 --> 00:07:07.510
just type D SYSBOLS.

172
00:07:07.510 --> 00:07:10.615
Now that symbols doesn't
sound a real word anymore,

173
00:07:10.615 --> 00:07:13.800
I think it's time to move
on to the next topic.