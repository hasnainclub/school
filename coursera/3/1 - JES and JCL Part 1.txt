Now we're going to talk about my good friends JES and JCL. If you're keeping track
of acronyms at home, that's job entry subsystem
and job control language. JES is a component
of Z iOS that's responsible for managing
batch workloads. In other words, you've got this big pile of work
that needs to get done and JES manages that pile of work including
receiving the jobs, making sure they make sense, putting all the pieces together, scheduling them to run, getting them into the pipeline, and making sure
that when they run, the output goes to
the right place. JCL is a scripting language that we use to
instruct the system how we want it to run those jobs once JCL
is ready to run them. Now there are two flavors of JES, JES 2 and JES 3. They handle things a
little bit differently enough for them to be
a JES 2 and a JES 3, and most people use JES 2, but the fundamentals
are the same. They both accept and queue
jobs submitted for execution. They both have the concept of an input and an output queue. They both queue jobs
for an initiator. That's a JES program that
goes around and says, "Hey, give me the next job, we're ready to do some work." There's also this concept
of accepting output from a job when it runs and
managing where it goes. It might go to a printer, it might get deleted
or maybe it saved on a spool for an output
manager to retrieve. The term spool is
probably a new one, you can just think of it as a method of handling data where new data can be fed in while
existing data is pulled off. So a spool functions both as an input and an output for JES. Some of the jobs that get run on the Z iOS are what
you call batch jobs. That term comes from the way
that they're started. Typically, with a single job
that ends up doing a whole lot of work with
minimal human interaction, and they're either scheduled for a specific time or
on as needed basis. So an example of a batch job
might be a job that looks at the inventory of a warehouse and the orders that
come in during the day, and determines how the truck
should be loaded up overnight for when the driver
show up the next morning. You would just make
sure that the job is pointing at the right data, run it, and know
that the output will be where you expect it
to be the next day. To speed up processing and
make things run faster, jobs with similar needs get batched together
and run as a group. No need for everyone to
drive, you can carpool. Batch jobs can also be stored up during working hours and then executed in the evening
when there aren't a lot of people logged in
doing interactive work. Once a batch job begins, it continues until it's done
or severe error occurs. After a batch job is
submitted for execution, there's normally
no further interaction required from you
until it's done. But you typically watch
it for a little while just to make sure nothing
obviously wrong is happening. We've spent all this
time talking about JES, let's get over to JCL. JCL is where you specify any resources that are
required by the program. Let's say you're running
a program that's doing something with a dataset
like most jobs are. You obviously need
to at least specify an input dataset and
probably an output dataset. It also acts as
a communicator between the operating system
and the program. It makes jobs out of work that can run without
any manual intervention, and it works according to
the priority levels of each job because that's
the thing you can set it to. In the JCL, you
specify who you are, which is important
for security reasons, and which resources and services are needed for
the program to run. Safe to say, without JCL, programs would have
a really hard time running on a mainframe. A job is a collection of
instructions that performs a specific task when
executed by the system. Think of a job as a unit of work which can be made
up of many jobs steps. Each job step is specified in JCL through a set of
job control statements. The operating system uses the job entry
subsystem to receive jobs into the operating system and to schedule them
for processing, as well as handling the output. Here's how it goes
from beginning to end. First, the user creates
the JCL for the job. Just a little bit of
insider information, very few people sit down and say, "I'm going to write some JCL
from scratch today." No. They have a few basic
templates that they keep around and edit them to fit whatever purpose they have
at that particular moment. Anyway, whether it's written from scratch or modified from
something they had before, the user has the JCL
they want to run. Next, the user submits
the JCL to JES, the job entry subsystem, now begins the job conversion. The JCL gets read by JES and
stores that in the spool. All throughout this,
the system communicates with the user on
the status of their job. When the job is complete, the allocated resource
and the space that it took up on the JES
spool are released. Now, the user can view
and interpret the output. Let's take a look at
what JCL looks like. This is a sample job card. First, you see the information required for
the spooling of a job, where you want the job
to go and run. Then there's
the //star statement. When you want to insert
a space or a comment, prepend it with this. Next, is the step and the name of the program
we want to execute. In this case, the step is
STEP10 and the program is SORT. For SORTIN and SORTOUT, those DD statements are
the data definitions. They spell out
the input and output datasets that the SORT job
needs to run. Since the SORTOUT dataset is new, we need to specify
the details for it. We also have a few DD
statements down here which tells JES what to do with the
output of the job itself. SYSIN DD asterisk which
some people call a splat, this is the area where we send additional commands
to the program. For example, maybe this SORT
program has a way of sorting things backwards or putting numbers before or after letters. Those might be parameters
we'd set in here. To mark the end of
the SYSIN stream data, we use /asterisk, splat. Now, that's the basics of JCL. If that made sense, you've got a good foundation
to go much further. We aren't going to get into
all of the features of JCL, otherwise this will be
a Coursera course on JCL, but there are a few other things
I want you to know. You know what? We're actually
running out of time for this video and we need to
continue it onto the next one. That's a bit of
a spoiler for part 2.