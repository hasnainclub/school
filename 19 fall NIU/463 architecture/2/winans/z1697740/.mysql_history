ls
;
SELECT*
;
SELECT *
;
SHOW TABLES;
SHOW TABLES
;
SHOW DATABASES
;
SELECT Z1697740
;
SELECT * Z1697740;
USE BabyName;
SHOW DATABASES;
USE BabyName;
DESCRIBE BabyName;
SELECT * FROM BabyName SUM(count);
SELECT * FROM BabyName WHERE  SUM(count);
SELECT * SUM(count) FROM BabyName;
SELECT DISTINCT * SUM(count) FROM BabyName;
SELECT COUNT (*) FROM BabyNames;
SELECT COUNT(*) FROM BabyName;
SELECT DISTINCT COUNT(*) FROM BabyName;
SELECT COUNT(*) FROM BabyName
where year = 1989;
SELECT COUNT(*) FROM BabyName where year = 1989;
SELECT DISTINCT name FROM BabyName;
SELECT DISTINCT name FROM BabyName WHERE  year =1989;
SELECT DISTINCT name FROM BabyName;
SELECT DISTINCT name FROM BabyName WHERE  year =1989;
SELECT DISTINCT name FROM BabyName WHERE  year =1989 AND WHERE name LIKE 'H%';
SELECT DISTINCT name FROM BabyName WHERE  year =1989, WHERE name LIKE 'H%';
SELECT DISTINCT name FROM BabyName WHERE  year =1989, (SELECT * FROM BabyNameWHERE name LIKE 'H%';
SELECT DISTINCT name FROM BabyName WHERE  year =1989 (SELECT * FROM BabyNameWHERE name LIKE 'H%');
SELECT DISTINCT name FROM BabyName WHERE  year =1989 (SELECT * FROM BabyName WHERE name LIKE 'H%');
SELECT DISTINCT name FROM BabyName
WHERE year = 1989
AND name LIKE 'H%';
SELECT DISTINCT name FROM BabyName WHERE year = 1989 AND name LIKE 'H%';
SELECT COUNT(gender='m'), COUNT(gender='f') FROM BabyName
where year = 1965;
SELECT COUNT(gender='m'), COUNT(gender='f') FROM BabyName where year = 1965;
SELECT COUNT(WHERE gender='m'), COUNT(gender='f') FROM BabyName where year = 1965;
SELECT COUNT(gender='w'), COUNT(gender='f') FROM BabyName where year = 1965;
SELECT SUM(gender='w'), COUNT(gender='f') FROM BabyName where year = 1965;
SELECT SUM(gender='M'), COUNT(gender='f') FROM BabyName where year = 1965;
SELECT SUM(gender='M'), SUM(gender='ff') FROM BabyName where year = 1965;
SELECT SUM(gender='M'), SUM(gender='f') FROM BabyName where year = 1965;
SELECT SUM(gender='M'), SUM(gender='q') FROM BabyName where year = 1965;
\T assign5.txt
SHOW DATABASES;
USE BabyName;
DESCRIBE BabyName;
SELECT DISTINCT name,year FROM BabyName
WHERE name = 'HASNAIN'
ORDER BY year;
SELECT DISTINCT name,year FROM BabyName WHERE name = 'HASNAIN' ORDER BY year;
SELECT DISTINCT name, year FROM BabyName
where year = 1989
ORDER BY name;
SELECT DISTINCT name, year FROM BabyName where year = 1989 ORDER BY name;
SELECT * FROM BabyName
WHERE name LIKE 'Hasn%'
ORDER BY name;
SELECT * FROM BabyName WHERE name LIKE 'Hasn%' ORDER BY name;
SELECT COUNT(*) FROM BabyName;
SELECT COUNT(*) FROM BabyName
WHERE year = 1989;
SELECT COUNT(*) FROM BabyName WHERE year = 1989;
SELECT DISTINCT name FROM BabyName
WHERE year = 1989
AND name LIKE 'H%';
SELECT DISTINCT name FROM BabyName WHERE year = 1989 AND name LIKE 'H%';
 SELECT SUM(gender='M'), SUM(gender='f') FROM BabyName where year = 1965;
\t
SHOW DATABASES;
USE HenryBooks;
USE henrybooks;
DESCRIBE henrybooks;
SHOWDATABASES;
SHOW DATABASES;
USE henrybooks;
DESCRIBE henrybooks;
SHOW TABLES.
;
SHOW TABLES;
SELECT Author;
SELECT* Author;
SELECT* NAME FROM  Author;
SHOW Author;
DESCRIBE Author;
SELECT* AuthorLast, AuthorFirst FROM  Author;
SELECT AuthorLast, AuthorFirst FROM  Author;
SELECT AuthorFirst, AuthorLast FROM  Author ORDER BY AuthorFirst;
DESCRIBE henrybooks;
SHOW TABLES;
DESCRIBE Publisher;
USE Publisher;
SELECT * Publisher;
DESCRIBE Publisher;
SELECT * FROM Publisher;
SELECT DISTINCT name,year FROM BabyName
WHERE name = 'HASNAIN'
;
SELECT DISTINCT name,year FROM BabyName WHERE name = 'HASNAIN';
SELECT DISTINCT City FROM henrybooks;
SELECT DISTINCT City FROM Publisher;
USE Publisher;
DESCRIBE Publisher;
USE henrybooks;
DESCRIBE henrybooks;
SHOW TABLES;
SELECT COUNT(*) FROM Book;
DESCRIBE Book;
SELECT COUNT(*)Title FROM Book;
SHOW TABLES;
DESCRIBE Branch;
SHOW BranchName;
SELECT BranchName FROM Branch;
SHOW TABLES;
DESCRIBE Book;
DESCRIBE Inventory;
SELECT BranchName,BranchNum FROM Branch;
SELECT BranchName FROM Branch;
DESCRIBE Book;
DESCRIBE Paperback;
SHOW TABLES Paperback;
DESCRIBE Inventory;
SELECT BranchName FROM Branch WHERE (OnHand);
SELECT * OnHand;
SELECT * OnHand FROM Inventory;
SELECT BranchName,OnHAND FROM Branch,Inventory;
SELECT DISTINCT BranchName,OnHAND FROM Branch,Inventory;
SELECT DISTINCT BranchName,OnHAND FROM Branch,Inventory
SELECT DISTINCT BranchName,OnHAND FROM Branch,Inventory;
SELECT DISTINCT BranchName,OnHAND FROM Branch,Inventory SELECT DISTINCT BranchName,OnHAND FROM Branch,Inventory;
SELECT DISTINCT BranchName, DISTINCT OnHAND FROM Branch,Inventory;
SELECT BranchName, DISTINCT OnHAND FROM Branch,Inventory;
SELECT DISTINCT BranchName,OnHAND FROM Branch,Inventory;
SELECT OnHAND FROM Branch,Inventory;
SELECT DISTINCT BranchName,OnHAND FROM Branch;
SELECT DISTINCT BranchName,OnHAND FROM Branch,Inventory;
SELECT DISTINCT BranchName,OnHAND FROM Branch;
SELECT DISTINCT BranchName,OnHAND;
SELECT DISTINCT BranchName FROM Branch;
SELECT DISTINCT OnHAND FROM Branch;
SELECT OnHAND FROM Inventory;
SELECT DISTINCT BranchName,OnHAND FROM Branch,Inventory;
SELECT Branch
SELECT DISTINCT BranchName,OnHAND FROM Branch,Inventory;
SELECT SUM(OnHAND) BranchName FROM Branch,Inventory;
SELECT SUM(OnHAND)Inventory;
SELECT SUM(OnHAND) FROM Inventory;
SELECT SUM(OnHAND) BranchName FROM Branch,Inventory;
SELECT SUM(OnHAND), BranchName FROM Branch,Inventory;
SELECT BranchName FROM Branch, SUM(OnHAND) FROM  Branch,Inventory;
SELECT BranchName FROM Branch, SUM(OnHAND) FROM Inventory;
SELECT BranchName FROM Branch;
SELECT BranchName FROM Branch ;
SELECT a.pub_id, a.pub_name, p.type,  COUNT(DISTINCT p.type)
FROM publishers AS a
INNER JOIN titles AS p ON a.pub_id = p.pub_id
GROUP BY a.pub_id, a.pub_name, p.type
;
SELECT a.pub_id, a.pub_name, p.type,  COUNT(DISTINCT p.type) FROM publishers AS a INNER JOIN titles AS p ON a.pub_id = p.pub_id GROUP BY a.pub_id, a.pub_name, p.type;
SELECT a.pub_id, a.pub_name, p.type,  COUNT(DISTINCT p.type)
FROM publishers AS a
INNER JOIN titles AS p ON a.pub_id = p.pub_id
GROUP BY a.pub_id, a.pub_name, p.type;
SELECT a.pub_id, a.pub_name, p.type,  COUNT(DISTINCT p.type) FROM publishers AS a INNER JOIN titles AS p ON a.pub_id = p.pub_id GROUP BY a.pub_id, a.pub_name, p.type;
SELECT BranchName,  COUNT(DISTINCT OnHAND) FROM Branch;
SELECT BranchName, COUNT(DISTINCT OnHAND) FROM Branch, Inventory;
SELECT BranchName, COUNT(OnHAND) FROM Branch, Inventory;
SELECT BranchName, COUNT(DISTINCT OnHAND) FROM Branch, Inventory;
SELECT* BranchName, COUNT(DISTINCT OnHAND) FROM Branch, Inventory;
SELECT BranchNam FROM Branch GROUP BY COUNT(DISTINCT OnHAND);
SELECT BranchName FROM Branch GROUP BY COUNT(DISTINCT OnHAND);
SELECT BranchName FROM Branch GROUP BY (OnHAND);
SELECT BranchName FROM Branch GROUP BY (OnHAND FROM Inventory);
SELECT BranchName FROM Branch GROUP BY;
SELECT BranchName FROM BranchName;
SELECT BranchName FROM Branch;
SELECT SNAME
FROM S
WHERE S# IN
(SELECT S#
FROM SP
WHERE P# IN
(SELECT P#
FROM P
WHERE COLOR = ‘RED’));
SELECT SNAME FROM S WHERE S (SELECT S FROM SP WHERE P (SELECT P FROM P WHERE COLOR = ‘RED’));
SELECT SNAME
FROM S
WHERE S# IN
(SELECT S#
FROM SP
WHERE P# IN
(SELECT P#
FROM P
WHERE COLOR = ‘RED’));
SELECT SNAME FROM S WHERE S (SELECT S FROM SP WHERE P (SELECT P FROM P WHERE COLOR = ‘RED’));
SELECT BranchName FROM Branch WHERE (SELECT OnHAND FROM Inventory);
SELECT BranchName FROM Branch WHERE (SELECT OnHAND<0 FROM Inventory);
SELECT DISTINCT BranchName FROM Branch WHERE (SELECT OnHAND<0 FROM Inventory);
SELECT DISTINCT BranchName FROM Branch WHERE (SELECT DISTINCT OnHAND<0 FROM Inventory);
SELECT DISTINCT BranchName FROM Branch WHERE (SELECT DISTINCT OnHAND FROM Inventory);
SELECT BranchName FROM Branch WHERE EXISTS OnHAND;
SELECT BranchName FROM Branch WHERE (OnHAND FROM Inventory);
SELECT BranchName FROM Branch WHERE (OnHAND FROM Inventory<0);
SELECT BranchName FROM Branch WHERE IN (OnHAND FROM Inventory<0);
SELECT SUM(OnHAND), BranchName FROM Branch,Inventory;
SELECT OnHAND, BranchName FROM Branch,Inventory;
SELECT BranchName, OnHAND,
FROM Branch CROSS JOIN Inventory;
SELECT BranchName, OnHAND, FROM Branch CROSS JOIN Inventory;
SELECT OnHAND, BranchName FROM Branch,Inventory;
SELECT OnHAND, SELECT BranchName, OnHAND,BranchName FROM Branch,Inventory;
FROM Branch CROSS JOIN Inventory;
SELECT OnHAND, SELECT BranchName, OnHAND,BranchName FROM Branch,Inventory;
SELECT BranchName, OnHAND,
FROM Branch CROSS JOIN Inventory;
SELECT BranchName, OnHAND, FROM Branch CROSS JOIN Inventory;
SELECT BranchName, OnHAND FROM Branch;
SELECT BranchName, SUM(OnHAND) FROM Branch;
SELECT  BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
SELECT  BranchName, (OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
SELECT  BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
SHOW TABLES;
DESCRIBE Author;
DESCRIBE Book;
DESCRIBE Branch;
SELECT COUNT(*)NumEmployees FROM Branch;
SELECT SUM(*)NumEmployees FROM Branch;
SELECT SUM(NumEmployees) FROM Branch;
SELECT Title FROM Book
WHERE BookCode IN (
SELECT AuthorNum FROM Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
WHERE AuthorLast = 'King' ));
SELECT Title FROM Book WHERE BookCode IN ( SELECT AuthorNum FROM Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' WHERE AuthorLast = 'King' ));
SELECT Title FROM Book
WHERE BookCode IN (
SELECT AuthorNum FROM Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
WHERE AuthorLast = 'King'
))
;
SELECT Title FROM Book WHERE BookCode IN ( SELECT AuthorNum FROM Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' WHERE AuthorLast = 'King' ));
SELECT Title FROM Book
WHERE BookCode IN (
SELECT BookCode FROM  Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
WHERE AuthorLast = 'King'
));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' WHERE AuthorLast = 'King' ));
SELECT Title FROM Book
WHERE BookCode IN (
SELECT BookCode FROM  Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
AND AuthorLast = 'King'
));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King' ));
SELECT Title FROM Book
WHERE BookCode IN (
SELECT BookCode FROM  Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
AND AuthorLast = 'King'
));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King' ));
SELECT Title FROM Book
WHERE BookCode IN (
SELECT BookCode FROM  Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
AND AuthorLast = 'King'
))SELECT Title FROM Book
WHERE BookCode IN (
SELECT BookCode FROM  Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
AND AuthorLast = 'King'
));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King' ))SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King' ));
SELECT Title FROM Book
WHERE BookCode IN (
SELECT BookCode FROM  Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
AND AuthorLast = 'King'
));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King' ));
SELECT Title FROM Book
WHERE BookCode IN (
SELECT BookCode FROM  Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
AND AuthorLast = 'King'
))
;
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King' ));
SHOW TABLES
;
USE Author;
Describe Author;
SELECT* Author;
SELECT* FROM Author;
SELECT* FROM Book;
SELECT* FROM Publisher;
SELECT* FROM Book;
SELECT* FROM Wrote;
SELECT* FROM Wrote ORDER BY AuthorNum;
SELECT* FROM Book;
SELECT Title FROM Book
WHERE BookCode IN (
SELECT BookCode FROM  Wrote
WHERE AuthorNum IN (
SELECT AuthorNum FROM Author
WHERE AuthorFirst = 'Stephen'
AND AuthorLast = 'King'
));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King' ));
SELECT* FROM Author;
SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King' );
( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King' );
SELECT* FROM Book;
SELECT* FROM Book WHERE (Paperback='Y');
SELECT Title, Type, Price, FROM Book WHERE (Paperback='Y');
SELECT Title, Type, Price FROM Book WHERE (Paperback='Y');
SHOW TABLES;
Select* FROM Inventory;
Select* FROM Inventory ORDER BY BookCode;
SHOW TABLES;
Select* FROM Branch;
Select* FROM Book;
SHOW TABLES;
Select* FROM Book;
Select* FROM Inventory;
SELECT BookCode FROM Inventory WHERE OnHand >3;
SELECT BranchName FROM Branch WHERE BookCode IN (
SELECT BookCode FROM Inventory WHERE OnHand >3 );
SELECT BranchName FROM Branch WHERE BookCode IN ( SELECT BookCode FROM Inventory WHERE OnHand >3 );
SELECT BranchName FROM Branch WHERE BookCode IN ANY ( SELECT BookCode FROM Inventory WHERE OnHand >3 );
SELECT BranchName FROM Branch WHERE BookCode IN ALL ( SELECT BookCode FROM Inventory WHERE OnHand >3 );
SELECT BranchName FROM Branch WHERE BookCode IN ( SELECT BookCode FROM Inventory WHERE OnHand >3 );
SELECT BranchName FROM Branch;
SHOW TABLES;
SELECT* FROM Branch;
Select* FROM Inventory;
SELECT BranchName FROM Branch WHERE BranchNum IN (
SELECT BranchNum FROM Inventory WHERE OnHand >3 );
SELECT BranchName FROM Branch WHERE BranchNum IN ( SELECT BranchNum FROM Inventory WHERE OnHand >3 );
SELECT BranchName FROM Branch WHERE BranchNum IN ( SELECT BranchNum FROM Inventory WHERE OnHand >10 );
SHOW TABLES;
SELECT* FROM Author;
SELECT* FROM Book;
SELECT* FROM Author;
SELECT* FROM Wrote;
SELECT Title, AuthorFirst, AuthorLast FROM Book 
INNER JOIN Wrote
 Book.BookCode = Wrote.BookCode
INNER JOIN Author
 Author.AuthorNum = Wrote.AuthorNum
GROUP BY Title DESC;
SELECT Title, AuthorFirst, AuthorLast FROM Book  INNER JOIN Wrote  Book.BookCode = Wrote.BookCode INNER JOIN Author  Author.AuthorNum = Wrote.AuthorNum GROUP BY Title DESC;
SELECT Title, AuthorFirst, AuthorLast FROM Book INNER JOIN Wrote Book.BookCode = Wrote.BookCode INNER JOIN Author Author.AuthorNum = Wrote.AuthorNum GROUP BY Title DESC;
SELECT Title, AuthorFirst, AuthorLast FROM Book INNER JOIN Wrote Book.BookCode = Wrote.BookCode INNER JOIN Author Author.AuthorNum = Wrote.AuthorNum GROUP BY Title DESC;SELECT Title, AuthorFirst, AuthorLast FROM Book 
INNER JOIN Wrote
 Book.BookCode = Wrote.BookCode
INNER JOIN Author
 Author.AuthorNum = Wrote.AuthorNum
GROUP BY Title DESC;
SELECT Title, AuthorFirst, AuthorLast FROM Book  INNER JOIN Wrote  Book.BookCode = Wrote.BookCode INNER JOIN Author  Author.AuthorNum = Wrote.AuthorNum GROUP BY Title DESC;
SELECT Title, AuthorFirst, AuthorLast FROM Book 
INNER JOIN Wrote
ON Book.BookCode = Wrote.BookCode
INNER JOIN Author
ON Author.AuthorNum = Wrote.AuthorNum
GROUP BY Title DESC
;
SELECT Title, AuthorFirst, AuthorLast FROM Book  INNER JOIN Wrote ON Book.BookCode = Wrote.BookCode INNER JOIN Author ON Author.AuthorNum = Wrote.AuthorNum GROUP BY Title DESC;
SELECT PublisherName, COUNT(BookCode),  FROM Publisher
INNER JOIN Book
ON Book.PublisherCode = Publisher.PublisherCode
GROUP BY PublisherName; 
SELECT PublisherName, COUNT(BookCode),  FROM Publisher INNER JOIN Book ON Book.PublisherCode = Publisher.PublisherCode GROUP BY PublisherName;
SELECT PublisherName, COUNT(BookCode) FROM Publisher
INNER JOIN Book
ON Book.PublisherCode = Publisher.PublisherCode
GROUP BY PublisherName; 
SELECT PublisherName, COUNT(BookCode) FROM Publisher INNER JOIN Book ON Book.PublisherCode = Publisher.PublisherCode GROUP BY PublisherName;
SHOW TABLES;
SELECT * FROM BOOKS;
SELECT * FROM Book;
SELECT COUNT(BookCode) FROM Book WHERE (Price < 10.0);
SHOW TABLES;
SELECT* Author;
SELECT*FROM  Author;
SHOW TABLES;
SELECT*FROM Publisher;
SELECT*FROM Publisher ORDER BY PublisherName;
DESCRIBE Publisher;
SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster';
SHOW TABLES;
SELECT*FROM Author;
SELECT*FROM Publisher;
SELECT BookCode FROM  Wrote WHERE PublisherCode IN (
SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster'));
SELECT BookCode FROM  Wrote WHERE PublisherCode IN ( SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster'));
Select * FROM Wrote;
SHOW TABLES;
SELECT*FROM Inventory;
SHOW Wrote;
SELECT*FROM Wrote;
SELECT*FROM Publisher;
SELECT*FROM Wrote;
SELECT*FROM Publisher;
SELECT AuthorNum FROM  Wrote WHERE PublisherCode IN (
SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster'));
SELECT AuthorNum FROM  Wrote WHERE PublisherCode IN ( SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster'));
SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster'));
SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster';
SELECT*FROM Wrote;
SELECT*FROM Publisher;
SELECT*FROM Author;
SELECT AuthorNum FROM  Wrote WHERE PublisherCode IN (
SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster');
SELECT AuthorNum FROM  Wrote WHERE PublisherCode IN ( SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster');
SELECT AuthorNum FROM  Wrote WHERE PublisherCode IN (SELECT PublisherCode FROM Publisher WHERE PublisherName= 'Simon and Schuster');
SELECT*FROM Wrote;
SELECT*FROM Publisher;
SELECT*FROM Wrote;
SELECT*FROM Book;
SELECT COUNT(BookCode) FROM Book WHERE (Price < 10.0);
SELECT COUNT(BookCode) FROM Book WHERE IN (DISTINCT TYPE);
SELECT COUNT(BookCode) FROM Book WHERE (DISTINCT TYPE);
SELECT COUNT(BookCode) FROM Book WHERE (TYPE);
SELECT COUNT(BookCode) FROM Book GROUP BY TYPE;
SELECT Title, COUNT(BookCode) FROM Book GROUP BY TYPE;
SELECT AuthorLast FROM Author 
JOIN Publisher 
ON Publisher.PublisherName = 'Simon and Schuster'
JOIN Wrote 
ON Author.AuthorNum = Wrote.AuthorNum
Join Book
ON Book.BookCode = Wrote.BookCode AND  Book.PublisherCode = Publisher.PublisherCode;
SELECT AuthorLast FROM Author  JOIN Publisher  ON Publisher.PublisherName = 'Simon and Schuster' JOIN Wrote  ON Author.AuthorNum = Wrote.AuthorNum Join Book ON Book.BookCode = Wrote.BookCode AND  Book.PublisherCode = Publisher.PublisherCode;
USE henrybooks;
SELECT AuthorLast FROM Author  JOIN Publisher  ON Publisher.PublisherName = 'Simon and Schuster' JOIN Wrote  ON Author.AuthorNum = Wrote.AuthorNum Join Book ON Book.BookCode = Wrote.BookCode AND  Book.PublisherCode = Publisher.PublisherCode;
SELECT Title, COUNT(BookCode) FROM Book GROUP BY TYPE;
SELECT BranchName, SUM(OnHAND)
JOIN Invetory
WHERE Inventory.BranchNum = Branch.BranchNum;
SELECT BranchName, SUM(OnHAND) JOIN Invetory WHERE Inventory.BranchNum = Branch.BranchNum;
SELECT SUM(OnHAND) JOIN Invetory WHERE Inventory.BranchNum = Branch.BranchNum;
SELECT SUM(OnHAND)
JOIN Invetory
WHERE Inventory.BranchNum = Branch.BranchNum AND BranchLocation = 'Brentwood Mall';
SELECT SUM(OnHAND) JOIN Invetory WHERE Inventory.BranchNum = Branch.BranchNum AND BranchLocation = 'Brentwood Mall';
SELECT SUM(OnHAND) FROM Branch JOIN Invetory WHERE Inventory.BranchNum = Branch.BranchNum AND BranchLocation = 'Brentwood Mall';
SELECT SUM(OnHAND)
JOIN Invetory
ON Inventory.BranchNum = Branch.BranchNum AND BranchLocation = 'Brentwood Mall';
SELECT SUM(OnHAND) JOIN Invetory ON Inventory.BranchNum = Branch.BranchNum AND BranchLocation = 'Brentwood Mall';
SELECT SUM(OnHAND)
JOIN Inventory
ON Inventory.BranchNum = Branch.BranchNum AND BranchLocation = 'Brentwood Mall';
SELECT SUM(OnHAND) JOIN Inventory ON Inventory.BranchNum = Branch.BranchNum AND BranchLocation = 'Brentwood Mall';
SELECT SUM(OnHAND) FROM Branch
JOIN Inventory
ON BranchLocation = 'Brentwood Mall' AND Inventory.BranchNum = Branch.BranchNum ;
SELECT SUM(OnHAND) FROM Branch JOIN Inventory ON BranchLocation = 'Brentwood Mall' AND Inventory.BranchNum = Branch.BranchNum;
SHOW TABLES;
Select * FROM Book;
Select Title FROM Book;
Select Title FROM Book GROUP BY BookCode;
Select Title, BookCode FROM Book GROUP BY BookCode;
Select Title, BookCode FROM Book (WHERE BookCode = '1%') GROUP BY BookCode;
Select Title, BookCode FROM Book WHERE (BookCode = '1%') GROUP BY BookCode;
Select Title, BookCode FROM Book WHERE (BookCode = '1___') GROUP BY BookCode;
Select Title, BookCode FROM Book WHERE (BookCode = '5163') GROUP BY BookCode;
Select Title, BookCode FROM Book WHERE (BookCode = 1351) GROUP BY BookCode;
Select Title, BookCode FROM Book WHERE (BookCode = 1___) GROUP BY BookCode;
Select Title, BookCode FROM Book WHERE (BookCode = '1___') GROUP BY BookCode;
Select Title, BookCode FROM Book WHERE (LIKE BookCode = '1___') GROUP BY BookCode;
Select Title, BookCode FROM Book WHERE LIKE (BookCode = '1___') GROUP BY BookCode;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory
JOIN Branch
ON Inventory.BranchNum = Branch.BranchNum
GROUP BY BranchLocation;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory JOIN Branch ON Inventory.BranchNum = Branch.BranchNum GROUP BY BranchLocation;
Select Title, BookCode FROM Book WHERE LIKE (BookCode = '1___') GROUP BY BookCode;
Select Title, BookCode FROM Book WHERE BookCode LIKE  '1___' GROUP BY BookCode;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory JOIN Branch ON Inventory.BranchNum = Branch.BranchNum GROUP BY BranchLocation;
Select Title, BookCode FROM Book WHERE BookCode LIKE  '1%' GROUP BY BookCode;
SELECT * FROM Book;
Select Title, BookCode FROM Book WHERE BookCode IN (Select  BookCode FROM Wrote
WHERE Sequence =1);
Select Title, BookCode FROM Book WHERE BookCode IN (Select  BookCode FROM Wrote WHERE Sequence =1);
Select Title FROM Book WHERE BookCode IN (Select  BookCode FROM Wrote WHERE Sequence =1);
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%' GROUP BY PublisherName;
Select * FROM Author;
Select * FROM Author WHERE AuthorLast LIKE '%LL%' OR WHERE AuthorFirst LIKE '%LL%';
Select * FROM Author WHERE AuthorLast LIKE '%LL%' OR AuthorFirst LIKE '%LL%';
SHOW TABLES;
SELECT * FROM BOOK;
SELECT * FROM Book;
SELECT * FROM Book WHERE BookCode = 079x OR BookCode = 138x OR BookCode = 669x;
SELECT * FROM Book WHERE BookCode = 079X OR BookCode = 138X OR BookCode = 66X;
SELECT * FROM Book WHERE BookCode = '079X' OR BookCode = '138X' OR BookCode = '66X';
SHOW TABLES;
Select * FROM Author;
Select (COUNT) FROM Author;
Select NumAuthors(COUNT) FROM Author;
Select * FROM Author;
SELECT Title, COUNT(BookCode) FROM Book GROUP BY TYPE;
SELECT  COUNT(AuthorNum) FROM AuthorBook GROUP BY TYPE;
SELECT  COUNT(AuthorNum) FROM Author GROUP BY TYPE;
SELECT  COUNT(AuthorNum) FROM Author ;
SELECT AuthorLast, Title, PublisherName FROM Wrote
JOIN Author
ON Wrote.AuthorNum = Author.AuthorNum
JOIN Book
ON Wrote.BookCode = Book.BookCode
JOINn Publisher
ON Publisher.PublisherCode = Book.PublisherCode
ORDER BY PublisherName;
SELECT AuthorLast, Title, PublisherName FROM Wrote JOIN Author ON Wrote.AuthorNum = Author.AuthorNum JOIN Book ON Wrote.BookCode = Book.BookCode JOINn Publisher ON Publisher.PublisherCode = Book.PublisherCode ORDER BY PublisherName;
SELECT AuthorLast, Title, PublisherName FROM Wrote
JOIN Author
ON Wrote.AuthorNum = Author.AuthorNum
JOIN Book
ON Wrote.BookCode = Book.BookCode
JOIN Publisher
ON Publisher.PublisherCode = Book.PublisherCode
ORDER BY PublisherName;
SELECT AuthorLast, Title, PublisherName FROM Wrote JOIN Author ON Wrote.AuthorNum = Author.AuthorNum JOIN Book ON Wrote.BookCode = Book.BookCode JOIN Publisher ON Publisher.PublisherCode = Book.PublisherCode ORDER BY PublisherName;
SELECT * FROM Book WHERE BookCode = '079X' OR BookCode = '138X' OR BookCode = '66X';
SELECT * FROM Book WHERE BookCode = '%X' OR BookCode = '%X' OR BookCode = '%X';
SELECT * FROM Book WHERE BookCode = '___X' OR BookCode = '___X' OR BookCode = '__X';
SELECT * FROM Book WHERE LIKE BookCode = '___X' OR LIKE BookCode = '___X' OR LIKE BookCode = '__X';
SELECT * FROM Book WHERE BookCode = '079X' OR BookCode = '138X' OR BookCode = '66X';
SELECT * FROM Book WHERE LIKE BookCode = '___X' OR LIKE BookCode = '___X' OR LIKE BookCode = '__X';
SELECT * FROM Book WHERE BookCode LIKE '___X' OR BookCode LIKE '___X' OR BookCode LIKE  '__X';
Select * FROM Author WHERE AuthorLast LIKE '%LL%' OR AuthorFirst LIKE '%LL%';
Select * FROM Author WHERE AuthorLast SOUNDEX '%LL%' OR AuthorFirst LIKE '%LL%';
Select * FROM Author WHERE AuthorLast SOUNDEX '%LL% ' OR AuthorFirst LIKE '%LL%';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T_____________________';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T___________';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%___';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T__%___';
/* HASNAIN ATTARWALA SECTION 3
SHOW THE DATABASE
*/
SHOW DATABASES;
-- USE the table
USE henrybooks;
--Show which tables are in there
SHOW TABLES;
/*
List all the authors, first name and last name in alphabetic
order of first name
*/
--1 
SELECT AuthorFirst, AuthorLast FROM  Author ORDER BY AuthorFirst;
/*
List all the cities that have a publisher, list each city only
once.
*/
--2
SELECT DISTINCT City FROM Publisher;
/*
How many book titles are in the database?
*/
--3
SELECT COUNT(*)Title FROM Book;
/*
4. For each branch, list the branch name and the total number of
books on hand.
*/
--4
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
/*
How many employees total work at Henry Books?
*/
--5
 SELECT SUM(NumEmployees) FROM Branch;
/*
List the titles of all of the books written by Stephen King.
*/
--6
SELECT Title FROM Book WHERE BookCode IN (
SELECT BookCode FROM  Wrote WHERE AuthorNum IN (
SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King'));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King'));
/*
List title, type and price for all books that are paperback.
*/
--7
SELECT Title, Type, Price FROM Book WHERE (Paperback='Y');
/*
List the branch name for all branches that have at least one
book that has at least 10 copies on hand.
*/
--8
 SELECT BranchName FROM Branch WHERE BranchNum IN ( SELECT BranchNum FROM Inventory WHERE OnHand >10 );
/*
For each book, list the title, author first name and author
last name. Print the list in reverse alphabetic order of the
title.
*/
--9
SELECT Title, AuthorFirst, AuthorLast FROM Book 
INNER JOIN Wrote
ON Book.BookCode = Wrote.BookCode
INNER JOIN Author
ON Author.AuthorNum = Wrote.AuthorNum
GROUP BY Title DESC;
SELECT Title, AuthorFirst, AuthorLast FROM Book  INNER JOIN Wrote ON Book.BookCode = Wrote.BookCode INNER JOIN Author ON Author.AuthorNum = Wrote.AuthorNum GROUP BY Title DESC;
/*
List each publisher by name and how many books they published
*/
--10
SELECT PublisherName, COUNT(BookCode) FROM Publisher
INNER JOIN Book
ON Book.PublisherCode = Publisher.PublisherCode
GROUP BY PublisherName; 
SELECT PublisherName, COUNT(BookCode) FROM Publisher INNER JOIN Book ON Book.PublisherCode = Publisher.PublisherCode GROUP BY PublisherName;
/*
How many books cost less than $10.00?
*/
--11
SELECT COUNT(BookCode) FROM Book WHERE (Price < 10.0);
/*
List the author last names for all the authors published by
Simon and Schuster.
*/
--12
SELECT AuthorLast FROM Author 
JOIN Publisher 
ON Publisher.PublisherName = 'Simon and Schuster'
JOIN Wrote 
ON Author.AuthorNum = Wrote.AuthorNum
Join Book
ON Book.BookCode = Wrote.BookCode AND  Book.PublisherCode = Publisher.PublisherCode
/*
 List each type of book and how many of each
*/
--13
SELECT Title, COUNT(BookCode) FROM Book GROUP BY TYPE;
SELECT AuthorLast FROM Author  JOIN Publisher  ON Publisher.PublisherName = 'Simon and Schuster' JOIN Wrote  ON Author.AuthorNum = Wrote.AuthorNum Join Book ON Book.BookCode = Wrote.BookCode AND  Book.PublisherCode = Publisher.PublisherCode    --13 SELECT Title, COUNT(BookCode) FROM Book GROUP BY TYPE;
/*
How many books are on hand at the Brentwood Mall location?
*/
--14
SELECT SUM(OnHAND) FROM Branch
JOIN Inventory
ON BranchLocation = 'Brentwood Mall' AND Inventory.BranchNum = Branch.BranchNum ;
SELECT SUM(OnHAND) FROM Branch JOIN Inventory ON BranchLocation = 'Brentwood Mall' AND Inventory.BranchNum = Branch.BranchNum;
/*
List each branch location, the number of employees and the
number of books on hand.
*/
--15
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory
JOIN Branch
ON Inventory.BranchNum = Branch.BranchNum
GROUP BY BranchLocation;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory JOIN Branch ON Inventory.BranchNum = Branch.BranchNum GROUP BY BranchLocation;
/*
List the titles of all books who have a Sequence number of 1.
You must use a nested select statement.
*/
--16
 Select Title FROM Book WHERE BookCode IN (Select  BookCode FROM Wrote WHERE Sequence =1);
/*
List all the publishers whose name starts with T.
*/
--17
 Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%';
/*
List all of the Author information for all authors that have a
double l in their name 
*/
--18
Select * FROM Author WHERE AuthorLast LIKE '%LL%' OR AuthorFirst LIKE '%LL%';
/*
List all the book titles that have a book code of 079x, 138x
or 669x.
*/
--19
SELECT * FROM Book WHERE BookCode = '079X' OR BookCode = '138X' OR BookCode = '66X';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%';
/*
List each author last name, book title and publisher name, in
alphabetic order of the publisher.
*/
--20
SELECT AuthorLast, Title, PublisherName FROM Wrote
JOIN Author
ON Wrote.AuthorNum = Author.AuthorNum
JOIN Book
ON Wrote.BookCode = Book.BookCode
JOIN Publisher
ON Publisher.PublisherCode = Book.PublisherCode
ORDER BY PublisherName
/*
Choose any 2 of the above, and write the SQL statements
differently.
*/
--19 and 17
SELECT * FROM Book WHERE BookCode LIKE '___X' OR BookCode LIKE '___X' OR BookCode LIKE  '__X';
SELECT AuthorLast, Title, PublisherName FROM Wrote JOIN Author ON Wrote.AuthorNum = Author.AuthorNum JOIN Book ON Wrote.BookCode = Book.BookCode JOIN Publisher ON Publisher.PublisherCode = Book.PublisherCode ORDER BY PublisherName   --19 and 17 SELECT * FROM Book WHERE BookCode LIKE '___X' OR BookCode LIKE '___X' OR BookCode LIKE  '__X';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T__%___';
/*
Looking at the tables, figure out another type of information
a person who worked at Henry Books might be interested in. Write
the question and the query and results to answer the question.
List the total number of authors you have
*/
--22
SELECT  COUNT(AuthorNum) FROM Author;
\T output.txt
/* HASNAIN ATTARWALA SECTION 3
SHOW THE DATABASE
*/
SHOW DATABASES;
-- USE the table
USE henrybooks;
--Show which tables are in there
SHOW TABLES;
/*
List all the authors, first name and last name in alphabetic
order of first name
*/
--1 
SELECT AuthorFirst, AuthorLast FROM  Author ORDER BY AuthorFirst;
/*
List all the cities that have a publisher, list each city only
once.
*/
--2
SELECT DISTINCT City FROM Publisher;
/*
How many book titles are in the database?
*/
--3
SELECT COUNT(*)Title FROM Book;
/*
4. For each branch, list the branch name and the total number of
books on hand.
*/
--4
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
/*
How many employees total work at Henry Books?
*/
--5
 SELECT SUM(NumEmployees) FROM Branch;
/*
List the titles of all of the books written by Stephen King.
*/
--6
SELECT Title FROM Book WHERE BookCode IN (
SELECT BookCode FROM  Wrote WHERE AuthorNum IN (
SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King'));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King'));
/*
List title, type and price for all books that are paperback.
*/
--7
SELECT Title, Type, Price FROM Book WHERE (Paperback='Y');
/*
List the branch name for all branches that have at least one
book that has at least 10 copies on hand.
*/
--8
 SELECT BranchName FROM Branch WHERE BranchNum IN ( SELECT BranchNum FROM Inventory WHERE OnHand >10 );
/*
For each book, list the title, author first name and author
last name. Print the list in reverse alphabetic order of the
title.
*/
--9
SELECT Title, AuthorFirst, AuthorLast FROM Book 
INNER JOIN Wrote
ON Book.BookCode = Wrote.BookCode
INNER JOIN Author
ON Author.AuthorNum = Wrote.AuthorNum
GROUP BY Title DESC;
SELECT Title, AuthorFirst, AuthorLast FROM Book  INNER JOIN Wrote ON Book.BookCode = Wrote.BookCode INNER JOIN Author ON Author.AuthorNum = Wrote.AuthorNum GROUP BY Title DESC;
/*
List each publisher by name and how many books they published
*/
--10
SELECT PublisherName, COUNT(BookCode) FROM Publisher
INNER JOIN Book
ON Book.PublisherCode = Publisher.PublisherCode
GROUP BY PublisherName; 
SELECT PublisherName, COUNT(BookCode) FROM Publisher INNER JOIN Book ON Book.PublisherCode = Publisher.PublisherCode GROUP BY PublisherName;
/*
How many books cost less than $10.00?
*/
--11
SELECT COUNT(BookCode) FROM Book WHERE (Price < 10.0);
/*
List the author last names for all the authors published by
Simon and Schuster.
*/
--12
SELECT AuthorLast FROM Author 
JOIN Publisher 
ON Publisher.PublisherName = 'Simon and Schuster'
JOIN Wrote 
ON Author.AuthorNum = Wrote.AuthorNum
Join Book
ON Book.BookCode = Wrote.BookCode AND  Book.PublisherCode = Publisher.PublisherCode
/*
 List each type of book and how many of each
*/
--13
SELECT Title, COUNT(BookCode) FROM Book GROUP BY TYPE;
SELECT AuthorLast FROM Author  JOIN Publisher  ON Publisher.PublisherName = 'Simon and Schuster' JOIN Wrote  ON Author.AuthorNum = Wrote.AuthorNum Join Book ON Book.BookCode = Wrote.BookCode AND  Book.PublisherCode = Publisher.PublisherCode    --13 SELECT Title, COUNT(BookCode) FROM Book GROUP BY TYPE;
/*
How many books are on hand at the Brentwood Mall location?
*/
--14
SELECT SUM(OnHAND) FROM Branch
JOIN Inventory
ON BranchLocation = 'Brentwood Mall' AND Inventory.BranchNum = Branch.BranchNum ;
SELECT SUM(OnHAND) FROM Branch JOIN Inventory ON BranchLocation = 'Brentwood Mall' AND Inventory.BranchNum = Branch.BranchNum;
/*
List each branch location, the number of employees and the
number of books on hand.
*/
--15
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory
JOIN Branch
ON Inventory.BranchNum = Branch.BranchNum
GROUP BY BranchLocation;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory JOIN Branch ON Inventory.BranchNum = Branch.BranchNum GROUP BY BranchLocation;
/*
List the titles of all books who have a Sequence number of 1.
You must use a nested select statement.
*/
--16
 Select Title FROM Book WHERE BookCode IN (Select  BookCode FROM Wrote WHERE Sequence =1);
/*
List all the publishers whose name starts with T.
*/
--17
 Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%';
/*
List all of the Author information for all authors that have a
double l in their name 
*/
--18
Select * FROM Author WHERE AuthorLast LIKE '%LL%' OR AuthorFirst LIKE '%LL%';
/*
List all the book titles that have a book code of 079x, 138x
or 669x.
*/
--19
SELECT * FROM Book WHERE BookCode = '079X' OR BookCode = '138X' OR BookCode = '66X';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%';
/*
List each author last name, book title and publisher name, in
alphabetic order of the publisher.
*/
--20
SELECT AuthorLast, Title, PublisherName FROM Wrote
JOIN Author
ON Wrote.AuthorNum = Author.AuthorNum
JOIN Book
ON Wrote.BookCode = Book.BookCode
JOIN Publisher
ON Publisher.PublisherCode = Book.PublisherCode
ORDER BY PublisherName
/*
Choose any 2 of the above, and write the SQL statements
differently.
*/
--19 and 17
SELECT * FROM Book WHERE BookCode LIKE '___X' OR BookCode LIKE '___X' OR BookCode LIKE  '__X';
SELECT AuthorLast, Title, PublisherName FROM Wrote JOIN Author ON Wrote.AuthorNum = Author.AuthorNum JOIN Book ON Wrote.BookCode = Book.BookCode JOIN Publisher ON Publisher.PublisherCode = Book.PublisherCode ORDER BY PublisherName   --19 and 17 SELECT * FROM Book WHERE BookCode LIKE '___X' OR BookCode LIKE '___X' OR BookCode LIKE  '__X';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T__%___';
/*
Looking at the tables, figure out another type of information
a person who worked at Henry Books might be interested in. Write
the question and the query and results to answer the question.
List the total number of authors you have
*/
--22
SELECT  COUNT(AuthorNum) FROM Author;
\t
SHOW TABLES
;
DESCRIBE TABLES;
SHOW DATABASES;
CREATE TABLE Dogs (
dogid int,
breed char(10),
name char(10),
primary key (dogid));
CREATE TABLE Dogs ( dogid int, breed char(10), name char(10), primary key (dogid));
USE DATABASE z1697740;
USE z1697740;
/* HASNAIN ATTARWALA SECTION 3
SHOW THE DATABASE
*/
SHOW DATABASES;
-- USE the table
USE henrybooks;
--Show which tables are in there
SHOW TABLES;
/*
List all the authors, first name and last name in alphabetic
order of first name
*/
--1 
SELECT AuthorFirst, AuthorLast FROM  Author ORDER BY AuthorFirst;
/*
List all the cities that have a publisher, list each city only
once.
*/
--2
SELECT DISTINCT City FROM Publisher;
/*
How many book titles are in the database?
*/
--3
SELECT COUNT(*)Title FROM Book;
/*
4. For each branch, list the branch name and the total number of
books on hand.
*/
--4
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
/*
How many employees total work at Henry Books?
*/
--5
 SELECT SUM(NumEmployees) FROM Branch;
/*
List the titles of all of the books written by Stephen King.
*/
--6
SELECT Title FROM Book WHERE BookCode IN (
SELECT BookCode FROM  Wrote WHERE AuthorNum IN (
SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King'));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King'));
/*
List title, type and price for all books that are paperback.
*/
--7
SELECT Title, Type, Price FROM Book WHERE (Paperback='Y');
/*
List the branch name for all branches that have at least one
book that has at least 10 copies on hand.
*/
--8
 SELECT BranchName FROM Branch WHERE BranchNum IN ( SELECT BranchNum FROM Inventory WHERE OnHand >10 );
/*
For each book, list the title, author first name and author
last name. Print the list in reverse alphabetic order of the
title.
*/
--9
SELECT Title, AuthorFirst, AuthorLast FROM Book 
INNER JOIN Wrote
ON Book.BookCode = Wrote.BookCode
INNER JOIN Author
ON Author.AuthorNum = Wrote.AuthorNum
GROUP BY Title DESC;
SELECT Title, AuthorFirst, AuthorLast FROM Book  INNER JOIN Wrote ON Book.BookCode = Wrote.BookCode INNER JOIN Author ON Author.AuthorNum = Wrote.AuthorNum GROUP BY Title DESC;
/*
List each publisher by name and how many books they published
*/
--10
SELECT PublisherName, COUNT(BookCode) FROM Publisher
INNER JOIN Book
ON Book.PublisherCode = Publisher.PublisherCode
GROUP BY PublisherName; 
SELECT PublisherName, COUNT(BookCode) FROM Publisher INNER JOIN Book ON Book.PublisherCode = Publisher.PublisherCode GROUP BY PublisherName;
/*
How many books cost less than $10.00?
*/
--11
SELECT COUNT(BookCode) FROM Book WHERE (Price < 10.0);
/*
List the author last names for all the authors published by
Simon and Schuster.
*/
--12
SELECT AuthorLast FROM Author 
JOIN Publisher 
ON Publisher.PublisherName = 'Simon and Schuster'
JOIN Wrote 
ON Author.AuthorNum = Wrote.AuthorNum
Join Book
ON Book.BookCode = Wrote.BookCode AND  Book.PublisherCode = Publisher.PublisherCode
/*
 List each type of book and how many of each
*/
--13
SELECT Title, COUNT(BookCode) FROM Book GROUP BY TYPE;
SELECT AuthorLast FROM Author  JOIN Publisher  ON Publisher.PublisherName = 'Simon and Schuster' JOIN Wrote  ON Author.AuthorNum = Wrote.AuthorNum Join Book ON Book.BookCode = Wrote.BookCode AND  Book.PublisherCode = Publisher.PublisherCode    --13 SELECT Title, COUNT(BookCode) FROM Book GROUP BY TYPE;
/*
How many books are on hand at the Brentwood Mall location?
*/
--14
SELECT SUM(OnHAND) FROM Branch
JOIN Inventory
ON BranchLocation = 'Brentwood Mall' AND Inventory.BranchNum = Branch.BranchNum ;
SELECT SUM(OnHAND) FROM Branch JOIN Inventory ON BranchLocation = 'Brentwood Mall' AND Inventory.BranchNum = Branch.BranchNum;
/*
List each branch location, the number of employees and the
number of books on hand.
*/
--15
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory
JOIN Branch
ON Inventory.BranchNum = Branch.BranchNum
GROUP BY BranchLocation;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory JOIN Branch ON Inventory.BranchNum = Branch.BranchNum GROUP BY BranchLocation;
/*
List the titles of all books who have a Sequence number of 1.
You must use a nested select statement.
*/
--16
 Select Title FROM Book WHERE BookCode IN (Select  BookCode FROM Wrote WHERE Sequence =1);
/*
List all the publishers whose name starts with T.
*/
--17
 Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%';
/*
List all of the Author information for all authors that have a
double l in their name 
*/
--18
Select * FROM Author WHERE AuthorLast LIKE '%LL%' OR AuthorFirst LIKE '%LL%';
/*
List all the book titles that have a book code of 079x, 138x
or 669x.
*/
--19
SELECT * FROM Book WHERE BookCode = '079X' OR BookCode = '138X' OR BookCode = '66X';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T%';
/*
List each author last name, book title and publisher name, in
alphabetic order of the publisher.
*/
--20
SELECT AuthorLast, Title, PublisherName FROM Wrote
JOIN Author
ON Wrote.AuthorNum = Author.AuthorNum
JOIN Book
ON Wrote.BookCode = Book.BookCode
JOIN Publisher
ON Publisher.PublisherCode = Book.PublisherCode
ORDER BY PublisherName
/*
Choose any 2 of the above, and write the SQL statements
differently.
*/
--19 and 17
SELECT * FROM Book WHERE BookCode LIKE '___X' OR BookCode LIKE '___X' OR BookCode LIKE  '__X';
SELECT AuthorLast, Title, PublisherName FROM Wrote JOIN Author ON Wrote.AuthorNum = Author.AuthorNum JOIN Book ON Wrote.BookCode = Book.BookCode JOIN Publisher ON Publisher.PublisherCode = Book.PublisherCode ORDER BY PublisherName   --19 and 17 SELECT * FROM Book WHERE BookCode LIKE '___X' OR BookCode LIKE '___X' OR BookCode LIKE  '__X';
Select PublisherName FROM Publisher WHERE PublisherName LIKE  'T__%___';
/*
Looking at the tables, figure out another type of information
a person who worked at Henry Books might be interested in. Write
the question and the query and results to answer the question.
List the total number of authors you have
*/
--22
SELECT  COUNT(AuthorNum) FROM Author;
USE z1697740;
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
primary key (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, breed varchar(255), name varchar(255), primary key (dogid));
SHOW TABLES;
INSERT INTO Dogs VALUES (rotwhiler, tomy);
SHOW TABLES;
DESCRIBE Dogs;
SELECT * Dogs;
SELECT * FROM Dogs;
INSERT INTO Dogs VALUES ('twhiler', 'tomy');
INSERT INTO Dogs (breed, name) VALUES ('rotwhiler', 'tomy');
SELECT * FROM Dogs;
INSERT INTO Dogs (breed, name) VALUES ('desikutta', 'sheru');
INSERT INTO Dogs (breed, name) VALUES ('stray', 'hero');
INSERT INTO Dogs (breed, name) VALUES ('germanshepherd', 'tiger');
INSERT INTO Dogs (breed, name) VALUES ('bakwaas', 'herolal');
SELECT * FROM Dogs;
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT, --default auto increments by 1
dogyid int,
name varchar(255),
PRIMARY KEY(vid)
FORIEGN KEY (dogyid REFERENCES Dogs(dogid ));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, --default auto increments by 1 dogyid int, name varchar(255), PRIMARY KEY(vid) FORIEGN KEY (dogyid REFERENCES Dogs(dogid ));
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,
dogyid int,
name varchar(255),
PRIMARY KEY(vid)
FORIEGN KEY (dogyid REFERENCES Dogs(dogid ));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, dogyid int, name varchar(255), PRIMARY KEY(vid) FORIEGN KEY (dogyid REFERENCES Dogs(dogid ));
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,
dogyid int,
name varchar(255),
PRIMARY KEY(vid)
FORIEGN KEY (dogyid REFERENCES Dogs(dogid)));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, dogyid int, name varchar(255), PRIMARY KEY(vid) FORIEGN KEY (dogyid REFERENCES Dogs(dogid)));
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,
dogyid int,
name varchar(255),
PRIMARY KEY(vid)
FORIEGN KEY (dogyid REFERENCES Dogs(dogid)))
;
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, dogyid int, name varchar(255), PRIMARY KEY(vid) FORIEGN KEY (dogyid REFERENCES Dogs(dogid)));
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,
dogyid int,
name varchar(255),
PRIMARY KEY(vid),
FORIEGN KEY (dogyid REFERENCES Dogs(dogid)));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, dogyid int, name varchar(255), PRIMARY KEY(vid), FORIEGN KEY (dogyid REFERENCES Dogs(dogid)));
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,  --default auto increments by 1
dogyid int,
name varchar(255),
PRIMARY KEY(vid),
FORIEGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT,  --default auto increments by 1 dogyid int, name varchar(255), PRIMARY KEY(vid), FORIEGN KEY (dogyid) REFERENCES Dogs(dogid));
SELECT * FROM Dogs;
SHOW TABLES;
DESCRIBE Dogs;
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,
dogyid int,
date DEFAULT CURDATE(),
PRIMARY KEY(vid),
FORIEGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, dogyid int, date DEFAULT CURDATE(), PRIMARY KEY(vid), FORIEGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,
dogyid int,
PRIMARY KEY(vid),
FORIEGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, dogyid int, PRIMARY KEY(vid), FORIEGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,
dogyid int,
date DEFAULT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, dogyid int, date DEFAULT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,
dogyid int,
date DEFAULT CURDATE(),
primary key(vid),
foreign key (dogyid) references Dogs(dogid));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, dogyid int, date DEFAULT CURDATE(), primary key(vid), foreign key (dogyid) references Dogs(dogid));
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT);
CREATE TABLE Visits (
vid int NOT NULL AUTO_INCREMENT,
primary key(vid);
CREATE TABLE Visits ( vid int NOT NULL AUTO_INCREMENT, primary key(vid);
DROP TABLE Dogs;
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT, --default auto increments by 1
breed varchar(255),
name varchar(255),
primary key (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, --default auto increments by 1 breed varchar(255), name varchar(255), primary key (dogid));
CREATE TABLE Dogs (
dogid int AUTO_INCREMENT, --default auto increments by 1
breed varchar(255),
name varchar(255),
primary key (dogid));
CREATE TABLE Dogs ( dogid int AUTO_INCREMENT, --default auto increments by 1 breed varchar(255), name varchar(255), primary key (dogid));
CREATE TABLE Dogs (
dogid int AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
primary key (dogid));
CREATE TABLE Dogs ( dogid int AUTO_INCREMENT, breed varchar(255), name varchar(255), primary key (dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DEFAULT CURDATE(),
primary key(vid),
foreign key (dogyid) references Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DEFAULT CURDATE(), primary key(vid), foreign key (dogyid) references Dogs(dogid));
SHOW DATABASES;
SHOW TABLES;
DROP TABLE Dogs;
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
primary key (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, breed varchar(255), name varchar(255), primary key (dogid));
DROP TABLE Dogs;
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT, --sjfls
breed varchar(255),
name varchar(255),
primary key (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, --sjfls breed varchar(255), name varchar(255), primary key (dogid));
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
primary key (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, breed varchar(255), name varchar(255), primary key (dogid));
INSERT INTO Dogs (breed, name) VALUES ('rotwhiler', 'tomy');
INSERT INTO Dogs (breed, name) VALUES ('desikutta', 'sheru');
INSERT INTO Dogs (breed, name) VALUES ('stray', 'hero');
INSERT INTO Dogs (breed, name) VALUES ('germanshepherd', 'tiger');
INSERT INTO Dogs (breed, name) VALUES ('bakwaas', 'herolal');
SHOW TABLES;
SELECT * FROM Dogs;
Describe Dogs;
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DEFAULT CURDATE(),
primary key(vid),
foreign key (dogyid) references Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DEFAULT CURDATE(), primary key(vid), foreign key (dogyid) references Dogs(dogid));
DROP TABLE Dogs;
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
PRIMARY KEY (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, breed varchar(255), name varchar(255), PRIMARY KEY (dogid));
INSERT INTO Dogs (breed, name) VALUES ('rotwhiler', 'tomy');
INSERT INTO Dogs (breed, name) VALUES ('desikutta', 'sheru');
INSERT INTO Dogs (breed, name) VALUES ('stray', 'hero');
INSERT INTO Dogs (breed, name) VALUES ('germanshepherd', 'tiger');
INSERT INTO Dogs (breed, name) VALUES ('bakwaas', 'herolal');
SHOW TABLES;
DESCRIBE Dogs;
SELECT * FROM Dogs;
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DEFAULT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES DOGS(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DEFAULT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES DOGS(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DEFAULT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DEFAULT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SHOW TABLES;
DESCRIBE Visits;
SELECT * FROM Visits;
DROP TABLE Visits;
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date int CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date int CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SHOW TABLES;
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
SELECT * date CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, SELECT * date CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
man CURDATE();
SELECT CURDATE();
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
DATE SELECT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, DATE SELECT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
DATE SELECT * CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, DATE SELECT * CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
DATE = SELECT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, DATE = SELECT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DATE DEFAULT CURDATE()
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DATE DEFAULT CURDATE() PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, CREATE TABLE Visits (date DATE DEFAULT CURDATE() PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
vid int AUTO_INCREMENT,
dogyid int,
date DATE DEFAULT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
vid int AUTO_INCREMENT, dogyid int, date DATE DEFAULT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DATE DEFAULT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DATE DEFAULT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DATETIME DEFAULT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DATETIME DEFAULT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DATETIME DEFAULT (CURDATE()),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DATETIME DEFAULT (CURDATE()), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DATE DEFAULT (CURDATE()),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DATE DEFAULT (CURDATE()), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
man curdate
;
man
;
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date date DEFAULT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date date DEFAULT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
dater date DEFAULT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, dater date DEFAULT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
dater date DEFAULT GETDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, dater date DEFAULT GETDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, dater date DEFAULT GETDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
dater DEFAULT GETDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, dater DEFAULT GETDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
dater DEFAULT GETDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, dater DEFAULT GETDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
dateAded date DEFAULT GETDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, dateAded date DEFAULT GETDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
dateAded date DEFAULT CURDATE(),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, dateAded date DEFAULT CURDATE(), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SELECT CURDATE();
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
ADD DateInserted DATETIME NOT NULL DEFAULT (GETDATE()),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, ADD DateInserted DATETIME NOT NULL DEFAULT (GETDATE()), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
ADD DateInserted DATETIME NOT NULL DEFAULT (CURDATE()),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, ADD DateInserted DATETIME NOT NULL DEFAULT (CURDATE()), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
INSERT INTO DateInserted DATETIME NOT NULL DEFAULT (CURDATE()),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, INSERT INTO DateInserted DATETIME NOT NULL DEFAULT (CURDATE()), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
ALTER TABLE Visits
ADD DateInserted DATETIME NOT NULL DEFAULT (CURDATE());
ALTER TABLE Visits ADD DateInserted DATETIME NOT NULL DEFAULT (CURDATE());
ALTER TABLE Visits
ADD DateInserted DATETIME NOT NULL DEFAULT (GETDATE());
ALTER TABLE Visits ADD DateInserted DATETIME NOT NULL DEFAULT (GETDATE());
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
DROP TABLE Visits;
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
DROP TABLE Visits;
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
INVOICEDATE DATE DEFAULT (CURRENT_DATE),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, INVOICEDATE DATE DEFAULT (CURRENT_DATE), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
INVOICEDATE DATE DEFAULT (CURDATE),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, INVOICEDATE DATE DEFAULT (CURDATE), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
INVOICEDATE DATE DEFAULT (CURDATE),
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, INVOICEDATE DATE DEFAULT (CURDATE), PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (
vid int AUTO_INCREMENT,
dogyid int,
date DATETIME DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(vid),
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DATETIME DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SHOW TABLES;
DESCRIBE Visits;
SELECT * Visits;
SELECT *FROM  Visits;
CREATE TABLE Visits ( vid int AUTO_INCREMENT, dogyid int, date DATETIME DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(vid), FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
DROP TABLE Visits;
CREATE TABLE Visits ( 
vid int AUTO_INCREMENT, 
dogyid int, 
date DATETIME DEFAULT CURRENT_TIMESTAMP, 
PRIMARY KEY(vid), 
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (  vid int AUTO_INCREMENT,  dogyid int,  date DATETIME DEFAULT CURRENT_TIMESTAMP,  PRIMARY KEY(vid),  FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
DESCRIBE Visits;
DESCRIBE Dogs;
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
SELECT * FROM Visits;
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
INSERT INTO Visits(dogyid)
VALUES (4);
INSERT INTO Visits(dogyid) VALUES (4);
INSERT INTO Visits(dogyid)
VALUES (5);
INSERT INTO Visits(dogyid) VALUES (5);
INSERT INTO Visits(dogyid)
VALUES (6);
INSERT INTO Visits(dogyid) VALUES (6);
INSERT INTO Visits(dogyid)
VALUES (7);
INSERT INTO Visits(dogyid) VALUES (7);
INSERT INTO Visits(dogyid)
VALUES (9);
INSERT INTO Visits(dogyid) VALUES (9);
DROP TABLE Visits;
CREATE TABLE Visits ( 
vid int AUTO_INCREMENT, 
dogyid int, 
date DATETIME DEFAULT CURRENT_TIMESTAMP, 
PRIMARY KEY(vid), 
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (  vid int AUTO_INCREMENT,  dogyid int,  date DATETIME DEFAULT CURRENT_TIMESTAMP,  PRIMARY KEY(vid),  FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
INSERT INTO Visits(dogyid)
VALUES (4);
INSERT INTO Visits(dogyid) VALUES (4);
INSERT INTO Visits(dogyid)
VALUES (5);
INSERT INTO Visits(dogyid) VALUES (5);
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
SELECT * FROM Visits;
DROP TABLE Visits;
CREATE TABLE Visits ( 
vid int AUTO_INCREMENT, 
dogyid int, 
PRIMARY KEY(vid), 
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (  vid int AUTO_INCREMENT,  dogyid int,  PRIMARY KEY(vid),  FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SELECT CURDATE();
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
INSERT INTO Visits(dogyid)
VALUES (4);
INSERT INTO Visits(dogyid) VALUES (4);
INSERT INTO Visits(dogyid)
VALUES (5);
INSERT INTO Visits(dogyid) VALUES (5);
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
SELECT * FROM Visits;
ALTER TABLE Visits ADD date DATETIME DEFAULT CURRENT_TIMESTAMP;
SELECT * FROM Visits;
ALTER TABLE Visits DROP date;
SELECT * FROM Visits;
ALTER TABLE Visits ADD date;
ALTER TABLE Visits ADD dater;
SELECT * FROM Visits;
ALTER TABLE Visits ADD date DATETIME DEFAULT CURRENT_TIMESTAMP;
SELECT * FROM Visits;
UPDATE Visits
SET date=CURRENT_TIMESTAMP
WHERE dogyid=1;
UPDATE Visits SET date=CURRENT_TIMESTAMP WHERE dogyid=1;
SELECT * FROM Visits;
SELECT dogyid FROM Dogs;
SELECT dogyid FROM Visits;
use z1697740;
SELECT name FROM Dogs;
SELECT name FROM dogs WHERE dogyid IN (
SELECT SELECT dogyid FROM Visits);
SELECT name FROM dogs WHERE dogyid IN ( SELECT SELECT dogyid FROM Visits);
SELECT name FROM dogs WHERE dogyid IN (
SELECT dogyid FROM Visits);
SELECT name FROM dogs WHERE dogyid IN ( SELECT dogyid FROM Visits);
SHOW TABLES;
SELECT name FROM dogs;
SELECT name FROM Dogs WHERE dogyid IN (
SELECT dogyid FROM Visits);
SELECT name FROM Dogs WHERE dogyid IN ( SELECT dogyid FROM Visits);
SELECT name FROM Dogs WHERE dogyid ALL( SELECT dogyid FROM Visits);
SELECT name FROM Dogs WHERE dogyid ANY( SELECT dogyid FROM Visits);
DESCRIBE Visits;
SELECT * Visits;
SELECT * FROM Visits;
SELECT * FROM Dogs;
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN dogid ON Dogs.dogyid=Visits.dogyid GROUP BY name;
USE z1697740;
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogyid=Visits.dogyid GROUP BY name;
SELECT * FROM Dogs;
SELECT * FROM Visits;
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogyid=Visits.dogyid GROUP BY name;
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name;
CREATE VIEW [dogsvisited] AS
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name;
CREATE VIEW [dogsvisited] AS SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name;
CREATE VIEW [dogsvisited] AS (
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
CREATE VIEW [dogsvisited] AS ( SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
CREATE VIEW dogsvisited AS (
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
CREATE VIEW dogsvisited AS ( SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
SELECT * FROM dogsvisited;
/* HASNAIN ATTARWALA SECTION 3
SHOW THE DATABASE
*/
SHOW DATABASES;
-- USE the table
USE z1697740;
--Show which tables are in there
SHOW TABLES;
/*
1. drop/delete all of the tables/views you will be creating
below*/
DROP TABLE Dogs;
DROP TABLE Visits;
DROP VIEW dogsvisited;
/*2. Create a table dogs with a dog id, a breed and a name. Dog
id should be an auto-increment primary key.*/
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
PRIMARY KEY (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, breed varchar(255), name varchar(255), PRIMARY KEY (dogid));
/*3. Put at least 5 records in this table*/
INSERT INTO Dogs (breed, name) VALUES ('rotwhiler', 'tomy');
INSERT INTO Dogs (breed, name) VALUES ('desikutta', 'sheru');
INSERT INTO Dogs (breed, name) VALUES ('stray', 'hero');
INSERT INTO Dogs (breed, name) VALUES ('germanshepherd', 'tiger');
INSERT INTO Dogs (breed, name) VALUES ('bakwaas', 'herolal');
/*4. Do a select * on this table to show all the records*/
SELECT * FROM Dogs;
/*5. Create a table called visits with a visit id (autoincrement
primary key), dog id (foreign key into dogs) and
date. Use the CURDATE() function.*/
CREATE TABLE Visits ( 
vid int AUTO_INCREMENT, 
dogyid int, 
PRIMARY KEY(vid), 
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (  vid int AUTO_INCREMENT,  dogyid int,  PRIMARY KEY(vid),  FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SELECT CURDATE();
/*6. Put at least 8 records in this table, which will mean some
of the dogs will have multiple visits.*/
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
INSERT INTO Visits(dogyid)
VALUES (4);
INSERT INTO Visits(dogyid) VALUES (4);
INSERT INTO Visits(dogyid)
VALUES (5);
INSERT INTO Visits(dogyid) VALUES (5);
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
/*7. Do a select * on this table to show all the records*/
SELECT * FROM Visits;
/*8. Add a column to the visit table for the time or day of week
– there are many date/time functions, pick one to use.*/
ALTER TABLE Visits ADD date DATETIME DEFAULT CURRENT_TIMESTAMP;
/*9. Update several rows to add values to the column you just
created.*/
UPDATE Visits
SET date=CURRENT_TIMESTAMP
WHERE dogyid=1;
UPDATE Visits SET date=CURRENT_TIMESTAMP WHERE dogyid=1;
/*10. Do a select * on this table to show all the records*/
SELECT * FROM Visits;
/*11. Define a view that will list each dog and the number of
visits they have made.*/
/*12. Do a select * on this view to show all the records */
CREATE VIEW dogsvisited AS (
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
CREATE VIEW dogsvisited AS ( SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
DROP TABLE Dogs;
DROP TABLE Visits;
DROP VIEW dogsvisited;
SHOW TABLES;
DROP TABLE Dogs;
DROP VIEW dogsvisited;
DROP TABLE Visits;
DROP TABLE Dogs;
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
PRIMARY KEY (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, breed varchar(255), name varchar(255), PRIMARY KEY (dogid));
INSERT INTO Dogs (breed, name) VALUES ('rotwhiler', 'tomy');
INSERT INTO Dogs (breed, name) VALUES ('desikutta', 'sheru');
INSERT INTO Dogs (breed, name) VALUES ('stray', 'hero');
INSERT INTO Dogs (breed, name) VALUES ('germanshepherd', 'tiger');
INSERT INTO Dogs (breed, name) VALUES ('bakwaas', 'herolal');
SELECT * FROM Dogs;
CREATE TABLE Visits ( 
vid int AUTO_INCREMENT, 
dogyid int, 
PRIMARY KEY(vid), 
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (  vid int AUTO_INCREMENT,  dogyid int,  PRIMARY KEY(vid),  FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SELECT CURDATE();
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
INSERT INTO Visits(dogyid)
VALUES (4);
INSERT INTO Visits(dogyid) VALUES (4);
INSERT INTO Visits(dogyid)
VALUES (5);
INSERT INTO Visits(dogyid) VALUES (5);
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
SELECT * FROM Visits;
ALTER TABLE Visits ADD date DATETIME DEFAULT CURRENT_TIMESTAMP;
UPDATE Visits
SET date=CURRENT_TIMESTAMP
WHERE dogyid=1;
UPDATE Visits SET date=CURRENT_TIMESTAMP WHERE dogyid=1;
SELECT * FROM Visits;
CREATE VIEW dogsvisited AS (
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
CREATE VIEW dogsvisited AS ( SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
SELECT * FROM dogsvisited;
SHOW TABLES;
DROP VIEW dogsvisited;
DROP TABLE Visits;
DROP TABLE Dogs;
/*2. Create a table dogs with a dog id, a breed and a name. Dog
id should be an auto-increment primary key.*/
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
PRIMARY KEY (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, breed varchar(255), name varchar(255), PRIMARY KEY (dogid));
/*3. Put at least 5 records in this table*/
INSERT INTO Dogs (breed, name) VALUES ('rotwhiler', 'tomy');
INSERT INTO Dogs (breed, name) VALUES ('desikutta', 'sheru');
INSERT INTO Dogs (breed, name) VALUES ('stray', 'hero');
INSERT INTO Dogs (breed, name) VALUES ('germanshepherd', 'tiger');
INSERT INTO Dogs (breed, name) VALUES ('bakwaas', 'herolal');
/*4. Do a select * on this table to show all the records*/
SELECT * FROM Dogs;
/*5. Create a table called visits with a visit id (autoincrement
primary key), dog id (foreign key into dogs) and
date. Use the CURDATE() function.*/
CREATE TABLE Visits ( 
vid int AUTO_INCREMENT, 
dogyid int, 
PRIMARY KEY(vid), 
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (  vid int AUTO_INCREMENT,  dogyid int,  PRIMARY KEY(vid),  FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SELECT CURDATE();
/*6. Put at least 8 records in this table, which will mean some
of the dogs will have multiple visits.*/
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
INSERT INTO Visits(dogyid)
VALUES (4);
INSERT INTO Visits(dogyid) VALUES (4);
INSERT INTO Visits(dogyid)
VALUES (5);
INSERT INTO Visits(dogyid) VALUES (5);
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
/*7. Do a select * on this table to show all the records*/
SELECT * FROM Visits;
/*8. Add a column to the visit table for the time or day of week
– there are many date/time functions, pick one to use.*/
ALTER TABLE Visits ADD date DATETIME DEFAULT CURRENT_TIMESTAMP;
/*9. Update several rows to add values to the column you just
created.*/
UPDATE Visits
SET date=CURRENT_TIMESTAMP
WHERE dogyid=1;
UPDATE Visits SET date=CURRENT_TIMESTAMP WHERE dogyid=1;
/*10. Do a select * on this table to show all the records*/
SELECT * FROM Visits;
/*11. Define a view that will list each dog and the number of
visits they have made.*/
CREATE VIEW dogsvisited AS (
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
CREATE VIEW dogsvisited AS ( SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
/*12. Do a select * on this view to show all the records */
SELECT * FROM dogsvisited;
/* HASNAIN ATTARWALA SECTION 3
SHOW THE DATABASE
*/
SHOW DATABASES;
-- USE the table
USE z1697740;
--Show which tables are in there
SHOW TABLES;
/*
1. drop/delete all of the tables/views you will be creating
below*/
DROP VIEW dogsvisited;
DROP TABLE Visits;
DROP TABLE Dogs;
/*2. Create a table dogs with a dog id, a breed and a name. Dog
id should be an auto-increment primary key.*/
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
PRIMARY KEY (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, breed varchar(255), name varchar(255), PRIMARY KEY (dogid));
/*3. Put at least 5 records in this table*/
INSERT INTO Dogs (breed, name) VALUES ('rotwhiler', 'tomy');
INSERT INTO Dogs (breed, name) VALUES ('desikutta', 'sheru');
INSERT INTO Dogs (breed, name) VALUES ('stray', 'hero');
INSERT INTO Dogs (breed, name) VALUES ('germanshepherd', 'tiger');
INSERT INTO Dogs (breed, name) VALUES ('bakwaas', 'herolal');
/*4. Do a select * on this table to show all the records*/
SELECT * FROM Dogs;
/*5. Create a table called visits with a visit id (autoincrement
primary key), dog id (foreign key into dogs) and
date. Use the CURDATE() function.*/
CREATE TABLE Visits ( 
vid int AUTO_INCREMENT, 
dogyid int, 
PRIMARY KEY(vid), 
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (  vid int AUTO_INCREMENT,  dogyid int,  PRIMARY KEY(vid),  FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SELECT CURDATE();
/*6. Put at least 8 records in this table, which will mean some
of the dogs will have multiple visits.*/
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
INSERT INTO Visits(dogyid)
VALUES (4);
INSERT INTO Visits(dogyid) VALUES (4);
INSERT INTO Visits(dogyid)
VALUES (5);
INSERT INTO Visits(dogyid) VALUES (5);
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
/*7. Do a select * on this table to show all the records*/
SELECT * FROM Visits;
/*8. Add a column to the visit table for the time or day of week
– there are many date/time functions, pick one to use.*/
ALTER TABLE Visits ADD date DATETIME DEFAULT CURRENT_TIMESTAMP;
/*9. Update several rows to add values to the column you just
created.*/
UPDATE Visits
SET date=CURRENT_TIMESTAMP
WHERE dogyid=1;
UPDATE Visits SET date=CURRENT_TIMESTAMP WHERE dogyid=1;
/*10. Do a select * on this table to show all the records*/
SELECT * FROM Visits;
/*11. Define a view that will list each dog and the number of
visits they have made.*/
CREATE VIEW dogsvisited AS (
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
CREATE VIEW dogsvisited AS ( SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
/*12. Do a select * on this view to show all the records */
SELECT * FROM dogsvisited;
\T out.txt
/* HASNAIN ATTARWALA SECTION 3
SHOW THE DATABASE
*/
SHOW DATABASES;
-- USE the table
USE z1697740;
--Show which tables are in there
SHOW TABLES;
/*
1. drop/delete all of the tables/views you will be creating
below*/
DROP VIEW dogsvisited;
DROP TABLE Visits;
DROP TABLE Dogs;
/*2. Create a table dogs with a dog id, a breed and a name. Dog
id should be an auto-increment primary key.*/
CREATE TABLE Dogs (
dogid int NOT NULL AUTO_INCREMENT,
breed varchar(255),
name varchar(255),
PRIMARY KEY (dogid));
CREATE TABLE Dogs ( dogid int NOT NULL AUTO_INCREMENT, breed varchar(255), name varchar(255), PRIMARY KEY (dogid));
/*3. Put at least 5 records in this table*/
INSERT INTO Dogs (breed, name) VALUES ('rotwhiler', 'tomy');
INSERT INTO Dogs (breed, name) VALUES ('desikutta', 'sheru');
INSERT INTO Dogs (breed, name) VALUES ('stray', 'hero');
INSERT INTO Dogs (breed, name) VALUES ('germanshepherd', 'tiger');
INSERT INTO Dogs (breed, name) VALUES ('bakwaas', 'herolal');
/*4. Do a select * on this table to show all the records*/
SELECT * FROM Dogs;
/*5. Create a table called visits with a visit id (autoincrement
primary key), dog id (foreign key into dogs) and
date. Use the CURDATE() function.*/
CREATE TABLE Visits ( 
vid int AUTO_INCREMENT, 
dogyid int, 
PRIMARY KEY(vid), 
FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
CREATE TABLE Visits (  vid int AUTO_INCREMENT,  dogyid int,  PRIMARY KEY(vid),  FOREIGN KEY (dogyid) REFERENCES Dogs(dogid));
SELECT CURDATE();
/*6. Put at least 8 records in this table, which will mean some
of the dogs will have multiple visits.*/
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
INSERT INTO Visits(dogyid)
VALUES (4);
INSERT INTO Visits(dogyid) VALUES (4);
INSERT INTO Visits(dogyid)
VALUES (5);
INSERT INTO Visits(dogyid) VALUES (5);
INSERT INTO Visits(dogyid)
VALUES (1);
INSERT INTO Visits(dogyid) VALUES (1);
INSERT INTO Visits(dogyid)
VALUES (2);
INSERT INTO Visits(dogyid) VALUES (2);
INSERT INTO Visits(dogyid)
VALUES (3);
INSERT INTO Visits(dogyid) VALUES (3);
/*7. Do a select * on this table to show all the records*/
SELECT * FROM Visits;
/*8. Add a column to the visit table for the time or day of week
– there are many date/time functions, pick one to use.*/
ALTER TABLE Visits ADD date DATETIME DEFAULT CURRENT_TIMESTAMP;
/*9. Update several rows to add values to the column you just
created.*/
UPDATE Visits
SET date=CURRENT_TIMESTAMP
WHERE dogyid=1;
UPDATE Visits SET date=CURRENT_TIMESTAMP WHERE dogyid=1;
/*10. Do a select * on this table to show all the records*/
SELECT * FROM Visits;
/*11. Define a view that will list each dog and the number of
visits they have made.*/
CREATE VIEW dogsvisited AS (
SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
CREATE VIEW dogsvisited AS ( SELECT name, COUNT(dogyid) FROM Dogs INNER JOIN Visits ON Dogs.dogid=Visits.dogyid GROUP BY name);
/*12. Do a select * on this view to show all the records */
SELECT * FROM dogsvisited;
\t
./commander.txt
;
USE z1697740;
CREATE TABLE fall (pk int primary key, data char (15);
SHOW DATABASES;
USE z1697740;
SHOW TABLES;
CREATE TABLE fall (pk int primary key, data char (15));
SHOW DATABASES;
\T Assgn9out.txt
USE z1697740;
CREATE TABLE fall (pk int primary key, data char (15));
\T Assgn9out.txt
USE z1697740;
CREATE TABLE fall (pk int primary key, data char (15));
start transaction;
insert into fall
values(1, 'dataA');
insert into fall values(1, 'dataA');
insert into fall
values(1, 'dataB');
insert into fall values(1, 'dataB');
insert into fall
values(2, 'dataB');
insert into fall values(2, 'dataB');
insert into fall
values(3, 'dataC');
insert into fall values(3, 'dataC');
select * from fall;
ls
;
\T Assgn9out.txt
USE z1697740;
CREATE TABLE fall (pk int primary key, data char (15));
start transaction;
insert into fall
values(1, 'dataA');
insert into fall values(1, 'dataA');
insert into fall
values(2, 'dataB');
insert into fall values(2, 'dataB');
insert into fall
values(3, 'dataC');
insert into fall values(3, 'dataC');
\T Assgn9out.txt
use z1697740;
select * from fall;
insert into fall
values(4, 'dataD);
insert into fall
values(5, 'dataE');
select * from fall;
';
insert into fall values(4, 'dataD);
insert into fall
values(5, 'dataE');
select * from fall;
';
start transaction;
insert into fall
values(1, 'dataA');
insert into fall values(1, 'dataA');
insert into fall
values(2, 'dataB');
insert into fall values(2, 'dataB');
kill 1
asdf;
kill 1 asdf;
use z1697740;
select * from fall;
insert into fall
values(4, 'dataD');
insert into fall values(4, 'dataD');
insert into fall
values(5, 'dataE');
insert into fall values(5, 'dataE');
select * from fall;
exit;
use z1697740;
start transaction;
delete from fall where pk = 3;
select * from fall;
Update fall set data = 'changed' where pk = 2;
Update fall set data = 'changed 2' where pk = 4;
insert into fall values(6, 'dataF');
select * from fall;
rollback;
select * from fall;
\T Assgn9out.txt
USE z1697740;
CREATE TABLE fall (pk int primary key, data char (15));
drop table fall
;
\T Assgn9out.txt
USE z1697740;
CREATE TABLE fall (pk int primary key, data char (15));
start transaction;
insert into fall
values(1, 'dataA');
insert into fall values(1, 'dataA');
insert into fall
values(2, 'dataB');
insert into fall values(2, 'dataB');
insert into fall
values(3, 'dataC');
insert into fall values(3, 'dataC');
commit;
select * from fall;
\t
exit;
USE z1697740;
select * from fall;
\t
exit;
\T Assgn9out.txt
use z1697740;
start transaction;
delete from fall where pk = 3;
select * from fall;
Update fall set data = 'changed' where pk = 2;
Update fall set data = 'changed 2' where pk = 4;
insert into fall values(6, 'dataF');
select * from fall;
rollback;
select * from fall;
\t
exit;
\T Assgn9out.txt
USE z1697740;
start transaction;
update fall
set data = 'data1A'
where pk=1;
update fall set data = 'data1A' where pk=1;
update fall
set data = 'data5E'
where pk = 5;
update fall set data = 'data5E' where pk = 5;
\T Assgn9out.txt
USE z1697740;
start transaction;
update fall
set data = 'data12B'
where pk = 1;
update fall set data = 'data12B' where pk = 1;
\t
SHOW DATABASES;
USE henrybooks;
SHOW TABLES;
use Publisher;
SELECT * Publisher;
SELECT * FROM Publisher;
USE henrybooks;
SELECT BranchName, Title, OnHand FROM Inventory 
 Book ON Book.BookCode = Inventory.BookCode,
        JOIN Branch ON Branch.BranchNum = Inventory.BranchNum,
       ORDER BY BranchName, Title;
SELECT BranchName, Title, OnHand FROM Inventory   Book ON Book.BookCode = Inventory.BookCode,         JOIN Branch ON Branch.BranchNum = Inventory.BranchNum,        ORDER BY BranchName, Title;
SELECT BranchName, Title, OnHand FROM Inventory JOIN Book ON Book.BookCode = Inventory.BookCode JOIN Branch ON Branch.BranchNum = Inventory.BranchNum
       ORDER BY BranchName, Title;
SELECT BranchName, Title, OnHand FROM Inventory JOIN Book ON Book.BookCode = Inventory.BookCode JOIN Branch ON Branch.BranchNum = Inventory.BranchNum        ORDER BY BranchName, Title;
SELECT BranchName, Title, OnHand FROM Inventory JOIN Book ON Book.BookCode = Inventory.BookCode JOIN Branch ON Branch.BranchNum = Inventory.BranchNum
       ORDER BY BranchName, Title;
SELECT BranchName, Title, OnHand FROM Inventory JOIN Book ON Book.BookCode = Inventory.BookCode JOIN Branch ON Branch.BranchNum = Inventory.BranchNum        ORDER BY BranchName, Title;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory
JOIN Branch
ON Inventory.BranchNum = Branch.BranchNum
GROUP BY BranchLocation;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory JOIN Branch ON Inventory.BranchNum = Branch.BranchNum GROUP BY BranchLocation;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory
JOIN Branch
ON Inventory.BranchNum = Branch.BranchNum
GROUP BY BranchLocation;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory JOIN Branch ON Inventory.BranchNum = Branch.BranchNum GROUP BY BranchLocation;
use z1697740
show tables
;
select * from Dogs;
describe Dogs;
show database;
SHOW TABLES;
SHOW DATABASES;
USE Z1813439
USE Z1813439;
USE z1813439;
SHOW TABLES;
USE henrybooks;
SHOW TABLES;
use henrybooks;
show tables;
use henrybooks;
show tables
;
show databases;
use henrybooks;
SHOW TABLES;
DESCRIBE Publisher;
DESCRIBE Book;
DESCRIBE Title FROM Book;
select Title FROM Book;
SELECT COUNT() Title FROM Book;
SELECT COUNT(JAZZ) Title FROM Book;
SELECT COUNT(Title) Title FROM Book;
SELECT COUNT(*)Title FROM Book;
show tables;
describe Branch;
describe Inventory;
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
SELECT BranchName, SUM(OnHand) FROM Inventory INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
SELECT BranchName, SUM(OnHand) FROM Inventory INNER JOIN Inventory ON Inventory.BranchNum=Branch.BranchNum GROUP BY BranchName;
SELECT BranchName, SUM(OnHand) FROM Inventory INNER JOIN Branch ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
SELECT AuthorFirst, AuthorLast,Title FROM Wrote, Book, Author WHERE AuthorFirst="Stephen" AND AuthorLast="King" AND Wrote.AuthorNum=Author.AuthorNum AND Book.BookCode=Wrote.BookCode;
SELECT Title FROM Book WHERE BookCode IN (
SELECT BookCode FROM  Wrote WHERE AuthorNum IN (
SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King'));
SELECT Title FROM Book WHERE BookCode IN ( SELECT BookCode FROM  Wrote WHERE AuthorNum IN ( SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King'));
describe Wrote;
SELECT AuthorNum FROM Author WHERE AuthorFirst = 'Stephen' AND AuthorLast = 'King';
SELECT BookCode FROM  Wrote WHERE AuthorNum IN (6);
SELECT Title FROM Book WHERE BookCode IN (SELECT Title FROM Book WHERE BookCode IN (
;
SELECT Title FROM Book WHERE BookCode IN (1351, 9611)
;
SELECT Title FROM Book WHERE BookCode IN (1351 AND 9611);
SELECT Title FROM Book WHERE BookCode IN (1351 OR 9611);
describe Wrote;
describe Author;
describe Book;
describe Publisher;
describe Branch;
describe Inventory;
SELECT BranchName, SUM(OnHand) FROM INNER JOIN ON BRANCH Branch.BranchNum=Inventory.BranchNum;
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN ON BRANCH Branch.BranchNum=Inventory.BranchNum;
SELECT BranchName, SUM(OnHand) FROM Inventory INNER JOIN ON BRANCH Branch.BranchNum=Inventory.BranchNum;
SELECT BranchName, SUM(OnHand) FROM Inventory INNER JOIN BRANCH ON  Branch.BranchNum=Inventory.BranchNum;
SELECT BranchName, SUM(OnHand) FROM Inventory INNER JOIN Branch ON  Branch.BranchNum=Inventory.BranchNum;
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum;
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum 
;
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum GROUP BY BranchName;
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum ORDER BY BranchName;
SELECT BranchName, SUM(OnHand) FROM Branch INNER JOIN Inventory ON Branch.BranchNum=Inventory.BranchNum ORDER BY DESC BranchName;
use henrybooks
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory
JOIN Branch
ON Inventory.BranchNum = Branch.BranchNum
GROUP BY BranchLocation;
SELECT BranchLocation, NumEmployees, SUM(OnHAND) FROM Inventory JOIN Branch ON Inventory.BranchNum = Branch.BranchNum GROUP BY BranchLocation;
describe Inventory;
describe Branch;
use z1697740;
SHOW DATABASES;
SHOW TABLES
;
SHOW DATABASES;
USE henrybooks;
SHOW TABLES;
SELECT * FROM Branch;
SHOW TABLES;
SHOW DATABASES;
USE z1697740;
SHOW TABLES
;
USE z1697740;
CREATE TABLE ShipAddress (
ship id int NOT NULL AUTO_INCREMENT,
street varchar (255),
city varchar(255),
state varchar(255),
zip int,
PRIMARY KEY (ship id));
CREATE TABLE ShipAddress ( ship id int NOT NULL AUTO_INCREMENT, street varchar (255), city varchar(255), state varchar(255), zip int, PRIMARY KEY (ship id));
SHOW TABLES;
CREATE TABLE ShipAddress (
ship id int NOT NULL AUTO_INCREMENT,
street varchar (255),
city varchar(255),
state varchar(255),
zip int,
PRIMARY KEY (ship id));
CREATE TABLE ShipAddress ( ship id int NOT NULL AUTO_INCREMENT, street varchar (255), city varchar(255), state varchar(255), zip int, PRIMARY KEY (ship id));
CREATE TABLE ShipAddress (
);
CREATE TABLE ShipAddress ( );
CREATE TABLE ShipAdress;
CREATE TABLE ShipAdress(shipid int NOT NULL AUTO_INCREMENT);
CREATE TABLE ShipAdress(shipid int NOT NULL AUTO_INCREMENT), PRIMARY KEY  ;
CREATE TABLE ShipAddress (
shipid int NOT NULL AUTO_INCREMENT,
street varchar (255),
city varchar(255),
state varchar(255),
zip int,
PRIMARY KEY (shipid));
CREATE TABLE ShipAddress ( shipid int NOT NULL AUTO_INCREMENT, street varchar (255), city varchar(255), state varchar(255), zip int, PRIMARY KEY (shipid));
SHOW TABLES;
describe ShipAddress;
REMOVE TABLE ShipAdress;
REMOVE ShipAdress;
DROP TABLE ShipAdress;
DROP TABLE ShipAddress;
SHOW TABLES;
USE z1697740;
CREATE TABLE ShipAddress (
shipId int NOT NULL AUTO_INCREMENT,
street varchar (255),
city varchar(255),
state varchar(255),
zip int,
PRIMARY KEY (shipId));
CREATE TABLE ShipAddress ( shipId int NOT NULL AUTO_INCREMENT, street varchar (255), city varchar(255), state varchar(255), zip int, PRIMARY KEY (shipId));
SHOW TABLES;
CREATE TABLE MailAddress (
mailId int NOT NULL AUTO_INCREMENT,
street varchar (255),
city varchar(255),
state varchar(255),
zip int,
PRIMARY KEY (mailId));
CREATE TABLE MailAddress ( mailId int NOT NULL AUTO_INCREMENT, street varchar (255), city varchar(255), state varchar(255), zip int, PRIMARY KEY (mailId));
SHOW TABLES;
CREATE TABLE CustomerRep (
custRepId int NOT NULL AUTO_INCREMENT,
firstName varchar (255),
lastName varchar(255),
email varchar(255),
phone int,
PRIMARY KEY (custRepId));
CREATE TABLE CustomerRep ( custRepId int NOT NULL AUTO_INCREMENT, firstName varchar (255), lastName varchar(255), email varchar(255), phone int, PRIMARY KEY (custRepId));
SHOW TABLES;
CREATE TABLE Company (
sele
compName varchar (255),
shipId varchar(255),
mailId varchar(255),
custRepId int,
PRIMARY KEY (companyId));
CREATE TABLE Company ( companyId int NOT NULL AUTO_INCREMENT, compName varchar (255), shipId varchar(255), mailId varchar(255), custRepId int, PRIMARY KEY (companyId));
FOREIGN KEY (shipId) REFERENCES ShipAddress(shipId),
FOREIGN KEY (mailId) REFERENCES MailAddress(mailId),
FOREIGN KEY (custRepId) REFERENCES CustomerRep(custRepId));
FOREIGN KEY (shipId) REFERENCES ShipAddress(shipId), FOREIGN KEY (mailId) REFERENCES MailAddress(mailId), FOREIGN KEY (custRepId) REFERENCES CustomerRep(custRepId));
SHOW TABLES;
CREATE TABLE Log (
logId int NOT NULL AUTO_INCREMENT,
password varchar (255)
PRIMARY KEY (logId));
CREATE TABLE Log ( logId int NOT NULL AUTO_INCREMENT, password varchar (255) PRIMARY KEY (logId));
SHOW TABLES;
CREATE Inventory (
inventoryId NOT NULL AUTO_INCREMENT,
pName varchar (255),
barcode int,
description varchar(255),
quantity int,
price float (4,2));
CREATE Inventory ( inventoryId NOT NULL AUTO_INCREMENT, pName varchar (255), barcode int, description varchar(255), quantity int, price float (4,2));
SHOW TABLES;
use z1697740
show tables;
DROP Company;
DROP TABLE  Company;
show tables;
DROP TABLE  CustAcct;
DROP TABLE  CustomerRep;

DROP TABLE ShipAddress;
show tables;
select * from contribution;
select * from contributor;
select * from karaoketrack;
DROP TABLE freeQueue;
show tables;
DROP TABLE Parts;
select * from Dogs;
show tables;
select * from Visits;
DROP TABLE contribution;
DROP TABLE contributor;
show tables;
select * from fall
;
DROP TABLE karaoketrack;
DROP TABLE paidQueue;
DROP TABLE song;
show tables;
select * from user;
DROP TABLE user;
DROP TABLE contributor;
show tables;
